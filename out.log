########################################################################################
########################################################################################
No_of_Unroll 1
faulty_node1_list ['A']
faulty_node2_list ['G1']
stuck_at_list ['sa0']
A G1 1 1 2
FF1_op fanout1 1 1 0
G1 FF1_ip 3 3 0
fanout1 out1 1 1 0
fanout1 G1 1 1 2
########################################################################################
########################################################################################
##########################################################
FF_op
FF1_op_0
FF_op
FF1_op_1
list_ip_FF ['FF1_ip_0']
list_op_FF ['FF1_op_1']
0
FF1_op_1
list_outedge ('FF1_op_1', 'fanout1_1')
No_of_Unroll 2
faulty_node1_list ['A_0', 'A_1']
faulty_node2_list ['G1_0', 'G1_1']
stuck_at_list ['sa0', 'sa0']
fanout1_0 G1_0 1 1 2
fanout1_0 out1_0 1 1 0
A_0 G1_0 1 1 2
FF1_op_0 fanout1_0 1 1 0
fanout1_1 G1_1 3 3 2
fanout1_1 out1_1 3 3 0
G1_1 FF1_ip_1 5 5 0
G1_0 fanout1_1 3 3 0
A_1 G1_1 1 1 4
faulty_list ['A_0', 'G1_0', 'sa0']
faulty_edge_select 0
faulty_edge_list ['A_0', 'G1_0', 'sa0']
OUTPUT
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
A_0 G1_0 x 0
FF1_op_0 fanout1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_1 FF1_ip_1 x x
G1_0 fanout1_1 x x
A_1 G1_1 x 0
PO_list [('G1_1', 'FF1_ip_1'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_0', 'G1_0', 'sa0']
['G1_0', 'fanout1_1', 'G1_1', 'FF1_ip_1']
edges [('G1_0', 'fanout1_1'), ('fanout1_1', 'G1_1'), ('G1_1', 'FF1_ip_1')]
i ('G1_0', 'fanout1_1')
i ('fanout1_1', 'G1_1')
i ('G1_1', 'FF1_ip_1')
G1_0 FF1_ip_1
X_path True
**********************Objective ********************
D_fronteir_list []
**********************Backtrace ********************
Backtrace node A_0 G1_0 1 0
I_Stack.peek() ('A_0', 'G1_0') 1
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_0', 'G1_0', 'sa0']
OUTPUT
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
A_0 G1_0 1 0
FF1_op_0 fanout1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_1 FF1_ip_1 x x
G1_0 fanout1_1 x x
A_1 G1_1 x 0
One turn over try another
PO_list [('G1_1', 'FF1_ip_1'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_0', 'G1_0', 'sa0']
['G1_0', 'fanout1_1', 'G1_1', 'FF1_ip_1']
edges [('G1_0', 'fanout1_1'), ('fanout1_1', 'G1_1'), ('G1_1', 'FF1_ip_1')]
i ('G1_0', 'fanout1_1')
i ('fanout1_1', 'G1_1')
i ('G1_1', 'FF1_ip_1')
G1_0 FF1_ip_1
X_path True
**********************Objective ********************
D_fronteir_list ['G1_0']
D_fronteir []
D_fronteir ['G1_0']
sort_D_fronteir
[('G1_0', 'fanout1_1')]
D_fronteir_list [('G1_0', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_0
**********************Backtrace ********************
node1,node2 fanout1_0 G1_0
Before Backtrace ('FF1_op_0', 'fanout1_0') x x
None
After Backtrace ('FF1_op_0', 'fanout1_0') 0 0
None
node1,node2 FF1_op_0 fanout1_0
Backtrace node FF1_op_0 fanout1_0 0 0
I_Stack.peek() ('A_0', 'G1_0') 1
('FF1_op_0', 'fanout1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_0', 'G1_0', 'sa0']
OUTPUT
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
A_0 G1_0 1 0
FF1_op_0 fanout1_0 0 0
fanout1_1 G1_1 1 0
fanout1_1 out1_1 1 0
G1_1 FF1_ip_1 x 0
G1_0 fanout1_1 1 0
A_1 G1_1 x 0
One turn over try another
G_Seq1.No_of_Unroll 3
########################################################################################
########################################################################################
##########################################################
FF_op
FF1_op_0
FF_op
FF1_op_1
FF_op
FF1_op_2
list_ip_FF ['FF1_ip_0', 'FF1_ip_1']
list_op_FF ['FF1_op_1', 'FF1_op_2']
0
FF1_op_1
list_outedge ('FF1_op_1', 'fanout1_1')
1
FF1_op_2
list_outedge ('FF1_op_2', 'fanout1_2')
No_of_Unroll 3
faulty_node1_list ['A_0', 'A_1', 'A_2']
faulty_node2_list ['G1_0', 'G1_1', 'G1_2']
stuck_at_list ['sa0', 'sa0', 'sa0']
fanout1_2 out1_2 5 5 0
fanout1_2 G1_2 5 5 2
fanout1_0 G1_0 1 1 2
fanout1_0 out1_0 1 1 0
A_0 G1_0 1 1 2
FF1_op_0 fanout1_0 1 1 0
G1_1 fanout1_2 5 5 0
G1_0 fanout1_1 3 3 0
A_1 G1_1 1 1 4
G1_2 FF1_ip_2 7 7 0
fanout1_1 G1_1 3 3 2
fanout1_1 out1_1 3 3 0
A_2 G1_2 1 1 6
faulty_list ['A_1', 'G1_1', 'sa0']
faulty_edge_select 1
faulty_edge_list ['A_1', 'G1_1', 'sa0']
OUTPUT
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
A_0 G1_0 x 0
FF1_op_0 fanout1_0 x x
G1_1 fanout1_2 x x
G1_0 fanout1_1 x x
A_1 G1_1 x 0
G1_2 FF1_ip_2 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
A_2 G1_2 x 0
PO_list [('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('G1_2', 'FF1_ip_2'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_1', 'G1_1', 'sa0']
G1_1 out1_0
G1_1 out1_1
['G1_1', 'fanout1_2', 'G1_2', 'FF1_ip_2']
edges [('G1_1', 'fanout1_2'), ('fanout1_2', 'G1_2'), ('G1_2', 'FF1_ip_2')]
i ('G1_1', 'fanout1_2')
i ('fanout1_2', 'G1_2')
i ('G1_2', 'FF1_ip_2')
G1_1 FF1_ip_2
X_path True
**********************Objective ********************
D_fronteir_list []
**********************Backtrace ********************
Backtrace node A_1 G1_1 1 0
I_Stack.peek() ('A_1', 'G1_1') 1
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_1', 'G1_1', 'sa0']
OUTPUT
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
A_0 G1_0 x 0
FF1_op_0 fanout1_0 x x
G1_1 fanout1_2 x x
G1_0 fanout1_1 x x
A_1 G1_1 1 0
G1_2 FF1_ip_2 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
A_2 G1_2 x 0
One turn over try another
PO_list [('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('G1_2', 'FF1_ip_2'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_1', 'G1_1', 'sa0']
G1_1 out1_0
G1_1 out1_1
['G1_1', 'fanout1_2', 'G1_2', 'FF1_ip_2']
edges [('G1_1', 'fanout1_2'), ('fanout1_2', 'G1_2'), ('G1_2', 'FF1_ip_2')]
i ('G1_1', 'fanout1_2')
i ('fanout1_2', 'G1_2')
i ('G1_2', 'FF1_ip_2')
G1_1 FF1_ip_2
X_path True
**********************Objective ********************
D_fronteir_list ['G1_1']
D_fronteir []
D_fronteir ['G1_1']
sort_D_fronteir
[('G1_1', 'fanout1_2')]
D_fronteir_list [('G1_1', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_1
**********************Backtrace ********************
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x x
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') x x
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
node1,node2 fanout1_0 G1_0
node1,node2 fanout1_0 G1_0
Before Backtrace ('FF1_op_0', 'fanout1_0') x x
None
After Backtrace ('FF1_op_0', 'fanout1_0') 0 0
None
node1,node2 FF1_op_0 fanout1_0
Backtrace node FF1_op_0 fanout1_0 0 0
I_Stack.peek() ('A_1', 'G1_1') 1
('FF1_op_0', 'fanout1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_1', 'G1_1', 'sa0']
OUTPUT
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 0 0
G1_1 fanout1_2 x 0
G1_0 fanout1_1 x 0
A_1 G1_1 1 0
G1_2 FF1_ip_2 x 0
fanout1_1 G1_1 x 0
fanout1_1 out1_1 x 0
A_2 G1_2 x 0
One turn over try another
PO_list [('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('G1_2', 'FF1_ip_2'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_1', 'G1_1', 'sa0']
G1_1 out1_0
G1_1 out1_1
['G1_1', 'fanout1_2', 'G1_2', 'FF1_ip_2']
edges [('G1_1', 'fanout1_2'), ('fanout1_2', 'G1_2'), ('G1_2', 'FF1_ip_2')]
i ('G1_1', 'fanout1_2')
i ('fanout1_2', 'G1_2')
i ('G1_2', 'FF1_ip_2')
G1_1 FF1_ip_2
X_path True
**********************Objective ********************
D_fronteir_list [('G1_1', 0)]
D_fronteir []
D_fronteir ['G1_1']
sort_D_fronteir
[('G1_1', 'fanout1_2')]
D_fronteir_list [('G1_1', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_1
**********************Backtrace ********************
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x 0
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') 0 0
None
node1,node2 A_0 G1_0
Backtrace node A_0 G1_0 0 0
I_Stack.peek() ('A_1', 'G1_1') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_1', 'G1_1', 'sa0']
OUTPUT
fanout1_2 out1_2 1 0
fanout1_2 G1_2 1 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
G1_1 fanout1_2 1 0
G1_0 fanout1_1 0 0
A_1 G1_1 1 0
G1_2 FF1_ip_2 x 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
A_2 G1_2 x 0
One turn over try another
G_Seq1.No_of_Unroll 4
########################################################################################
########################################################################################
##########################################################
FF_op
FF1_op_0
FF_op
FF1_op_1
FF_op
FF1_op_2
FF_op
FF1_op_3
list_ip_FF ['FF1_ip_0', 'FF1_ip_1', 'FF1_ip_2']
list_op_FF ['FF1_op_1', 'FF1_op_2', 'FF1_op_3']
2
FF1_op_3
list_outedge ('FF1_op_3', 'fanout1_3')
0
FF1_op_1
list_outedge ('FF1_op_1', 'fanout1_1')
1
FF1_op_2
list_outedge ('FF1_op_2', 'fanout1_2')
No_of_Unroll 4
faulty_node1_list ['A_0', 'A_1', 'A_2', 'A_3']
faulty_node2_list ['G1_0', 'G1_1', 'G1_2', 'G1_3']
stuck_at_list ['sa0', 'sa0', 'sa0', 'sa0']
A_3 G1_3 1 1 8
A_0 G1_0 1 1 2
FF1_op_0 fanout1_0 1 1 0
fanout1_3 out1_3 7 7 0
fanout1_3 G1_3 7 7 2
A_2 G1_2 1 1 6
fanout1_2 out1_2 5 5 0
fanout1_2 G1_2 5 5 2
A_1 G1_1 1 1 4
fanout1_0 G1_0 1 1 2
fanout1_0 out1_0 1 1 0
fanout1_1 G1_1 3 3 2
fanout1_1 out1_1 3 3 0
G1_1 fanout1_2 5 5 0
G1_0 fanout1_1 3 3 0
G1_3 FF1_ip_3 9 9 0
G1_2 fanout1_3 7 7 0
faulty_list ['A_2', 'G1_2', 'sa0']
faulty_edge_select 2
faulty_edge_list ['A_2', 'G1_2', 'sa0']
OUTPUT
A_3 G1_3 x 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 x x
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
A_2 G1_2 x 0
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
A_1 G1_1 x 0
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_1 fanout1_2 x x
G1_0 fanout1_1 x x
G1_3 FF1_ip_3 x x
G1_2 fanout1_3 x x
PO_list [('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('G1_3', 'FF1_ip_3'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_2', 'G1_2', 'sa0']
['G1_2', 'fanout1_3', 'out1_3']
edges [('G1_2', 'fanout1_3'), ('fanout1_3', 'out1_3')]
i ('G1_2', 'fanout1_3')
i ('fanout1_3', 'out1_3')
G1_2 out1_3
X_path True
**********************Objective ********************
D_fronteir_list []
**********************Backtrace ********************
Backtrace node A_2 G1_2 1 0
I_Stack.peek() ('A_2', 'G1_2') 1
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_2', 'G1_2', 'sa0']
OUTPUT
A_3 G1_3 x 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 x x
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
A_2 G1_2 1 0
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
A_1 G1_1 x 0
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_1 fanout1_2 x x
G1_0 fanout1_1 x x
G1_3 FF1_ip_3 x x
G1_2 fanout1_3 x x
One turn over try another
PO_list [('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('G1_3', 'FF1_ip_3'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_2', 'G1_2', 'sa0']
['G1_2', 'fanout1_3', 'out1_3']
edges [('G1_2', 'fanout1_3'), ('fanout1_3', 'out1_3')]
i ('G1_2', 'fanout1_3')
i ('fanout1_3', 'out1_3')
G1_2 out1_3
X_path True
**********************Objective ********************
D_fronteir_list ['G1_2']
D_fronteir []
D_fronteir ['G1_2']
sort_D_fronteir
[('G1_2', 'fanout1_3')]
D_fronteir_list [('G1_2', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_2
**********************Backtrace ********************
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x x
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x x
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x x
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') x x
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
node1,node2 fanout1_0 G1_0
node1,node2 fanout1_0 G1_0
Before Backtrace ('FF1_op_0', 'fanout1_0') x x
None
After Backtrace ('FF1_op_0', 'fanout1_0') 0 0
None
node1,node2 FF1_op_0 fanout1_0
Backtrace node FF1_op_0 fanout1_0 0 0
I_Stack.peek() ('A_2', 'G1_2') 1
('FF1_op_0', 'fanout1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_2', 'G1_2', 'sa0']
OUTPUT
A_3 G1_3 x 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 0 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_2 G1_2 1 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
A_1 G1_1 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 x 0
fanout1_1 out1_1 x 0
G1_1 fanout1_2 x 0
G1_0 fanout1_1 x 0
G1_3 FF1_ip_3 x 0
G1_2 fanout1_3 x 0
One turn over try another
PO_list [('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('G1_3', 'FF1_ip_3'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_2', 'G1_2', 'sa0']
['G1_2', 'fanout1_3', 'out1_3']
edges [('G1_2', 'fanout1_3'), ('fanout1_3', 'out1_3')]
i ('G1_2', 'fanout1_3')
i ('fanout1_3', 'out1_3')
G1_2 out1_3
X_path True
**********************Objective ********************
D_fronteir_list [('G1_2', 0)]
D_fronteir []
D_fronteir ['G1_2']
sort_D_fronteir
[('G1_2', 'fanout1_3')]
D_fronteir_list [('G1_2', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_2
**********************Backtrace ********************
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x 0
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') 0 0
None
node1,node2 A_0 G1_0
Backtrace node A_0 G1_0 0 0
I_Stack.peek() ('A_2', 'G1_2') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_2', 'G1_2', 'sa0']
OUTPUT
A_3 G1_3 x 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_2 G1_2 1 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
A_1 G1_1 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_1 fanout1_2 x 0
G1_0 fanout1_1 0 0
G1_3 FF1_ip_3 x 0
G1_2 fanout1_3 x 0
One turn over try another
PO_list [('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('G1_3', 'FF1_ip_3'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_2', 'G1_2', 'sa0']
['G1_2', 'fanout1_3', 'out1_3']
edges [('G1_2', 'fanout1_3'), ('fanout1_3', 'out1_3')]
i ('G1_2', 'fanout1_3')
i ('fanout1_3', 'out1_3')
G1_2 out1_3
X_path True
**********************Objective ********************
D_fronteir_list [('G1_2', 0)]
D_fronteir []
D_fronteir ['G1_2']
sort_D_fronteir
[('G1_2', 'fanout1_3')]
D_fronteir_list [('G1_2', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_2
**********************Backtrace ********************
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') 0 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 A_1 G1_1
Backtrace node A_1 G1_1 0 0
I_Stack.peek() ('A_2', 'G1_2') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_2', 'G1_2', 'sa0']
OUTPUT
A_3 G1_3 x 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
fanout1_3 out1_3 1 0
fanout1_3 G1_3 1 0
A_2 G1_2 1 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
A_1 G1_1 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_1 fanout1_2 0 0
G1_0 fanout1_1 0 0
G1_3 FF1_ip_3 x 0
G1_2 fanout1_3 1 0
One turn over try another
G_Seq1.No_of_Unroll 5
########################################################################################
########################################################################################
##########################################################
FF_op
FF1_op_0
FF_op
FF1_op_1
FF_op
FF1_op_2
FF_op
FF1_op_3
FF_op
FF1_op_4
list_ip_FF ['FF1_ip_0', 'FF1_ip_1', 'FF1_ip_2', 'FF1_ip_3']
list_op_FF ['FF1_op_1', 'FF1_op_2', 'FF1_op_3', 'FF1_op_4']
2
FF1_op_3
list_outedge ('FF1_op_3', 'fanout1_3')
3
FF1_op_4
list_outedge ('FF1_op_4', 'fanout1_4')
0
FF1_op_1
list_outedge ('FF1_op_1', 'fanout1_1')
1
FF1_op_2
list_outedge ('FF1_op_2', 'fanout1_2')
No_of_Unroll 5
faulty_node1_list ['A_0', 'A_1', 'A_2', 'A_3', 'A_4']
faulty_node2_list ['G1_0', 'G1_1', 'G1_2', 'G1_3', 'G1_4']
stuck_at_list ['sa0', 'sa0', 'sa0', 'sa0', 'sa0']
A_4 G1_4 1 1 10
A_3 G1_3 1 1 8
A_0 G1_0 1 1 2
FF1_op_0 fanout1_0 1 1 0
fanout1_3 out1_3 7 7 0
fanout1_3 G1_3 7 7 2
A_2 G1_2 1 1 6
fanout1_4 G1_4 9 9 2
fanout1_4 out1_4 9 9 0
fanout1_2 out1_2 5 5 0
fanout1_2 G1_2 5 5 2
A_1 G1_1 1 1 4
fanout1_0 G1_0 1 1 2
fanout1_0 out1_0 1 1 0
fanout1_1 G1_1 3 3 2
fanout1_1 out1_1 3 3 0
G1_1 fanout1_2 5 5 0
G1_0 fanout1_1 3 3 0
G1_3 fanout1_4 9 9 0
G1_2 fanout1_3 7 7 0
G1_4 FF1_ip_4 11 11 0
faulty_list ['A_3', 'G1_3', 'sa0']
faulty_edge_select 3
faulty_edge_list ['A_3', 'G1_3', 'sa0']
OUTPUT
A_4 G1_4 x 0
A_3 G1_3 x 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 x x
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
A_2 G1_2 x 0
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
A_1 G1_1 x 0
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_1 fanout1_2 x x
G1_0 fanout1_1 x x
G1_3 fanout1_4 x x
G1_2 fanout1_3 x x
G1_4 FF1_ip_4 x x
PO_list [('G1_4', 'FF1_ip_4'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_3', 'G1_3', 'sa0']
['G1_3', 'fanout1_4', 'G1_4', 'FF1_ip_4']
edges [('G1_3', 'fanout1_4'), ('fanout1_4', 'G1_4'), ('G1_4', 'FF1_ip_4')]
i ('G1_3', 'fanout1_4')
i ('fanout1_4', 'G1_4')
i ('G1_4', 'FF1_ip_4')
G1_3 FF1_ip_4
X_path True
**********************Objective ********************
D_fronteir_list []
**********************Backtrace ********************
Backtrace node A_3 G1_3 1 0
I_Stack.peek() ('A_3', 'G1_3') 1
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_3', 'G1_3', 'sa0']
OUTPUT
A_4 G1_4 x 0
A_3 G1_3 1 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 x x
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
A_2 G1_2 x 0
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
A_1 G1_1 x 0
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_1 fanout1_2 x x
G1_0 fanout1_1 x x
G1_3 fanout1_4 x x
G1_2 fanout1_3 x x
G1_4 FF1_ip_4 x x
One turn over try another
PO_list [('G1_4', 'FF1_ip_4'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_3', 'G1_3', 'sa0']
['G1_3', 'fanout1_4', 'G1_4', 'FF1_ip_4']
edges [('G1_3', 'fanout1_4'), ('fanout1_4', 'G1_4'), ('G1_4', 'FF1_ip_4')]
i ('G1_3', 'fanout1_4')
i ('fanout1_4', 'G1_4')
i ('G1_4', 'FF1_ip_4')
G1_3 FF1_ip_4
X_path True
**********************Objective ********************
D_fronteir_list ['G1_3']
D_fronteir []
D_fronteir ['G1_3']
sort_D_fronteir
[('G1_3', 'fanout1_4')]
D_fronteir_list [('G1_3', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_3
**********************Backtrace ********************
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x x
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x x
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x x
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x x
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x x
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') x x
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
node1,node2 fanout1_0 G1_0
node1,node2 fanout1_0 G1_0
Before Backtrace ('FF1_op_0', 'fanout1_0') x x
None
After Backtrace ('FF1_op_0', 'fanout1_0') 0 0
None
node1,node2 FF1_op_0 fanout1_0
Backtrace node FF1_op_0 fanout1_0 0 0
I_Stack.peek() ('A_3', 'G1_3') 1
('FF1_op_0', 'fanout1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_3', 'G1_3', 'sa0']
OUTPUT
A_4 G1_4 x 0
A_3 G1_3 1 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 0 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_2 G1_2 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
A_1 G1_1 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 x 0
fanout1_1 out1_1 x 0
G1_1 fanout1_2 x 0
G1_0 fanout1_1 x 0
G1_3 fanout1_4 x 0
G1_2 fanout1_3 x 0
G1_4 FF1_ip_4 x 0
One turn over try another
PO_list [('G1_4', 'FF1_ip_4'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_3', 'G1_3', 'sa0']
['G1_3', 'fanout1_4', 'G1_4', 'FF1_ip_4']
edges [('G1_3', 'fanout1_4'), ('fanout1_4', 'G1_4'), ('G1_4', 'FF1_ip_4')]
i ('G1_3', 'fanout1_4')
i ('fanout1_4', 'G1_4')
i ('G1_4', 'FF1_ip_4')
G1_3 FF1_ip_4
X_path True
**********************Objective ********************
D_fronteir_list [('G1_3', 0)]
D_fronteir []
D_fronteir ['G1_3']
sort_D_fronteir
[('G1_3', 'fanout1_4')]
D_fronteir_list [('G1_3', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_3
**********************Backtrace ********************
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x 0
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') 0 0
None
node1,node2 A_0 G1_0
Backtrace node A_0 G1_0 0 0
I_Stack.peek() ('A_3', 'G1_3') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_3', 'G1_3', 'sa0']
OUTPUT
A_4 G1_4 x 0
A_3 G1_3 1 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_2 G1_2 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
A_1 G1_1 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_1 fanout1_2 x 0
G1_0 fanout1_1 0 0
G1_3 fanout1_4 x 0
G1_2 fanout1_3 x 0
G1_4 FF1_ip_4 x 0
One turn over try another
PO_list [('G1_4', 'FF1_ip_4'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_3', 'G1_3', 'sa0']
['G1_3', 'fanout1_4', 'G1_4', 'FF1_ip_4']
edges [('G1_3', 'fanout1_4'), ('fanout1_4', 'G1_4'), ('G1_4', 'FF1_ip_4')]
i ('G1_3', 'fanout1_4')
i ('fanout1_4', 'G1_4')
i ('G1_4', 'FF1_ip_4')
G1_3 FF1_ip_4
X_path True
**********************Objective ********************
D_fronteir_list [('G1_3', 0)]
D_fronteir []
D_fronteir ['G1_3']
sort_D_fronteir
[('G1_3', 'fanout1_4')]
D_fronteir_list [('G1_3', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_3
**********************Backtrace ********************
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') 0 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 A_1 G1_1
Backtrace node A_1 G1_1 0 0
I_Stack.peek() ('A_3', 'G1_3') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_3', 'G1_3', 'sa0']
OUTPUT
A_4 G1_4 x 0
A_3 G1_3 1 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_2 G1_2 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
A_1 G1_1 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_1 fanout1_2 0 0
G1_0 fanout1_1 0 0
G1_3 fanout1_4 x 0
G1_2 fanout1_3 x 0
G1_4 FF1_ip_4 x 0
One turn over try another
PO_list [('G1_4', 'FF1_ip_4'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_3', 'G1_3', 'sa0']
['G1_3', 'fanout1_4', 'G1_4', 'FF1_ip_4']
edges [('G1_3', 'fanout1_4'), ('fanout1_4', 'G1_4'), ('G1_4', 'FF1_ip_4')]
i ('G1_3', 'fanout1_4')
i ('fanout1_4', 'G1_4')
i ('G1_4', 'FF1_ip_4')
G1_3 FF1_ip_4
X_path True
**********************Objective ********************
D_fronteir_list [('G1_3', 0)]
D_fronteir []
D_fronteir ['G1_3']
sort_D_fronteir
[('G1_3', 'fanout1_4')]
D_fronteir_list [('G1_3', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_3
**********************Backtrace ********************
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') 0 0
None
node1,node2 A_2 G1_2
Backtrace node A_2 G1_2 0 0
I_Stack.peek() ('A_3', 'G1_3') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_3', 'G1_3', 'sa0']
OUTPUT
A_4 G1_4 x 0
A_3 G1_3 1 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_2 G1_2 0 0
fanout1_4 G1_4 1 0
fanout1_4 out1_4 1 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
A_1 G1_1 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_1 fanout1_2 0 0
G1_0 fanout1_1 0 0
G1_3 fanout1_4 1 0
G1_2 fanout1_3 0 0
G1_4 FF1_ip_4 x 0
One turn over try another
G_Seq1.No_of_Unroll 6
########################################################################################
########################################################################################
##########################################################
FF_op
FF1_op_0
FF_op
FF1_op_1
FF_op
FF1_op_2
FF_op
FF1_op_3
FF_op
FF1_op_4
FF_op
FF1_op_5
list_ip_FF ['FF1_ip_0', 'FF1_ip_1', 'FF1_ip_2', 'FF1_ip_3', 'FF1_ip_4']
list_op_FF ['FF1_op_1', 'FF1_op_2', 'FF1_op_3', 'FF1_op_4', 'FF1_op_5']
2
FF1_op_3
list_outedge ('FF1_op_3', 'fanout1_3')
3
FF1_op_4
list_outedge ('FF1_op_4', 'fanout1_4')
0
FF1_op_1
list_outedge ('FF1_op_1', 'fanout1_1')
1
FF1_op_2
list_outedge ('FF1_op_2', 'fanout1_2')
4
FF1_op_5
list_outedge ('FF1_op_5', 'fanout1_5')
No_of_Unroll 6
faulty_node1_list ['A_0', 'A_1', 'A_2', 'A_3', 'A_4', 'A_5']
faulty_node2_list ['G1_0', 'G1_1', 'G1_2', 'G1_3', 'G1_4', 'G1_5']
stuck_at_list ['sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0']
G1_3 fanout1_4 9 9 0
A_4 G1_4 1 1 10
A_3 G1_3 1 1 8
A_0 G1_0 1 1 2
FF1_op_0 fanout1_0 1 1 0
G1_5 FF1_ip_5 13 13 0
fanout1_3 out1_3 7 7 0
fanout1_3 G1_3 7 7 2
A_5 G1_5 1 1 12
A_2 G1_2 1 1 6
fanout1_4 G1_4 9 9 2
fanout1_4 out1_4 9 9 0
fanout1_5 G1_5 11 11 2
fanout1_5 out1_5 11 11 0
fanout1_2 out1_2 5 5 0
fanout1_2 G1_2 5 5 2
A_1 G1_1 1 1 4
fanout1_0 G1_0 1 1 2
fanout1_0 out1_0 1 1 0
fanout1_1 G1_1 3 3 2
fanout1_1 out1_1 3 3 0
G1_1 fanout1_2 5 5 0
G1_0 fanout1_1 3 3 0
G1_2 fanout1_3 7 7 0
G1_4 fanout1_5 11 11 0
faulty_list ['A_4', 'G1_4', 'sa0']
faulty_edge_select 4
faulty_edge_list ['A_4', 'G1_4', 'sa0']
OUTPUT
G1_3 fanout1_4 x x
A_4 G1_4 x 0
A_3 G1_3 x 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 x x
G1_5 FF1_ip_5 x x
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
fanout1_5 G1_5 x x
fanout1_5 out1_5 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
A_1 G1_1 x 0
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_1 fanout1_2 x x
G1_0 fanout1_1 x x
G1_2 fanout1_3 x x
G1_4 fanout1_5 x x
PO_list [('G1_5', 'FF1_ip_5'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_4', 'G1_4', 'sa0']
['G1_4', 'fanout1_5', 'G1_5', 'FF1_ip_5']
edges [('G1_4', 'fanout1_5'), ('fanout1_5', 'G1_5'), ('G1_5', 'FF1_ip_5')]
i ('G1_4', 'fanout1_5')
i ('fanout1_5', 'G1_5')
i ('G1_5', 'FF1_ip_5')
G1_4 FF1_ip_5
X_path True
**********************Objective ********************
D_fronteir_list []
**********************Backtrace ********************
Backtrace node A_4 G1_4 1 0
I_Stack.peek() ('A_4', 'G1_4') 1
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_4', 'G1_4', 'sa0']
OUTPUT
G1_3 fanout1_4 x x
A_4 G1_4 1 0
A_3 G1_3 x 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 x x
G1_5 FF1_ip_5 x x
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
fanout1_5 G1_5 x x
fanout1_5 out1_5 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
A_1 G1_1 x 0
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_1 fanout1_2 x x
G1_0 fanout1_1 x x
G1_2 fanout1_3 x x
G1_4 fanout1_5 x x
One turn over try another
PO_list [('G1_5', 'FF1_ip_5'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_4', 'G1_4', 'sa0']
['G1_4', 'fanout1_5', 'G1_5', 'FF1_ip_5']
edges [('G1_4', 'fanout1_5'), ('fanout1_5', 'G1_5'), ('G1_5', 'FF1_ip_5')]
i ('G1_4', 'fanout1_5')
i ('fanout1_5', 'G1_5')
i ('G1_5', 'FF1_ip_5')
G1_4 FF1_ip_5
X_path True
**********************Objective ********************
D_fronteir_list ['G1_4']
D_fronteir []
D_fronteir ['G1_4']
sort_D_fronteir
[('G1_4', 'fanout1_5')]
D_fronteir_list [('G1_4', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_4
**********************Backtrace ********************
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x x
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x x
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x x
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x x
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x x
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x x
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x x
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') x x
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
node1,node2 fanout1_0 G1_0
node1,node2 fanout1_0 G1_0
Before Backtrace ('FF1_op_0', 'fanout1_0') x x
None
After Backtrace ('FF1_op_0', 'fanout1_0') 0 0
None
node1,node2 FF1_op_0 fanout1_0
Backtrace node FF1_op_0 fanout1_0 0 0
I_Stack.peek() ('A_4', 'G1_4') 1
('FF1_op_0', 'fanout1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_4', 'G1_4', 'sa0']
OUTPUT
G1_3 fanout1_4 x 0
A_4 G1_4 1 0
A_3 G1_3 x 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 0 0
G1_5 FF1_ip_5 x 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
A_1 G1_1 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 x 0
fanout1_1 out1_1 x 0
G1_1 fanout1_2 x 0
G1_0 fanout1_1 x 0
G1_2 fanout1_3 x 0
G1_4 fanout1_5 x 0
One turn over try another
PO_list [('G1_5', 'FF1_ip_5'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_4', 'G1_4', 'sa0']
['G1_4', 'fanout1_5', 'G1_5', 'FF1_ip_5']
edges [('G1_4', 'fanout1_5'), ('fanout1_5', 'G1_5'), ('G1_5', 'FF1_ip_5')]
i ('G1_4', 'fanout1_5')
i ('fanout1_5', 'G1_5')
i ('G1_5', 'FF1_ip_5')
G1_4 FF1_ip_5
X_path True
**********************Objective ********************
D_fronteir_list [('G1_4', 0)]
D_fronteir []
D_fronteir ['G1_4']
sort_D_fronteir
[('G1_4', 'fanout1_5')]
D_fronteir_list [('G1_4', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_4
**********************Backtrace ********************
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x 0
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') 0 0
None
node1,node2 A_0 G1_0
Backtrace node A_0 G1_0 0 0
I_Stack.peek() ('A_4', 'G1_4') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_4', 'G1_4', 'sa0']
OUTPUT
G1_3 fanout1_4 x 0
A_4 G1_4 1 0
A_3 G1_3 x 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
G1_5 FF1_ip_5 x 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
A_1 G1_1 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_1 fanout1_2 x 0
G1_0 fanout1_1 0 0
G1_2 fanout1_3 x 0
G1_4 fanout1_5 x 0
One turn over try another
PO_list [('G1_5', 'FF1_ip_5'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_4', 'G1_4', 'sa0']
['G1_4', 'fanout1_5', 'G1_5', 'FF1_ip_5']
edges [('G1_4', 'fanout1_5'), ('fanout1_5', 'G1_5'), ('G1_5', 'FF1_ip_5')]
i ('G1_4', 'fanout1_5')
i ('fanout1_5', 'G1_5')
i ('G1_5', 'FF1_ip_5')
G1_4 FF1_ip_5
X_path True
**********************Objective ********************
D_fronteir_list [('G1_4', 0)]
D_fronteir []
D_fronteir ['G1_4']
sort_D_fronteir
[('G1_4', 'fanout1_5')]
D_fronteir_list [('G1_4', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_4
**********************Backtrace ********************
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') 0 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 A_1 G1_1
Backtrace node A_1 G1_1 0 0
I_Stack.peek() ('A_4', 'G1_4') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_4', 'G1_4', 'sa0']
OUTPUT
G1_3 fanout1_4 x 0
A_4 G1_4 1 0
A_3 G1_3 x 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
G1_5 FF1_ip_5 x 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
A_1 G1_1 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_1 fanout1_2 0 0
G1_0 fanout1_1 0 0
G1_2 fanout1_3 x 0
G1_4 fanout1_5 x 0
One turn over try another
PO_list [('G1_5', 'FF1_ip_5'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_4', 'G1_4', 'sa0']
['G1_4', 'fanout1_5', 'G1_5', 'FF1_ip_5']
edges [('G1_4', 'fanout1_5'), ('fanout1_5', 'G1_5'), ('G1_5', 'FF1_ip_5')]
i ('G1_4', 'fanout1_5')
i ('fanout1_5', 'G1_5')
i ('G1_5', 'FF1_ip_5')
G1_4 FF1_ip_5
X_path True
**********************Objective ********************
D_fronteir_list [('G1_4', 0)]
D_fronteir []
D_fronteir ['G1_4']
sort_D_fronteir
[('G1_4', 'fanout1_5')]
D_fronteir_list [('G1_4', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_4
**********************Backtrace ********************
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') 0 0
None
node1,node2 A_2 G1_2
Backtrace node A_2 G1_2 0 0
I_Stack.peek() ('A_4', 'G1_4') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_4', 'G1_4', 'sa0']
OUTPUT
G1_3 fanout1_4 x 0
A_4 G1_4 1 0
A_3 G1_3 x 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
G1_5 FF1_ip_5 x 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_5 G1_5 x 0
A_2 G1_2 0 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
A_1 G1_1 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_1 fanout1_2 0 0
G1_0 fanout1_1 0 0
G1_2 fanout1_3 0 0
G1_4 fanout1_5 x 0
One turn over try another
PO_list [('G1_5', 'FF1_ip_5'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2'), ('fanout1_1', 'out1_1')]
faulty_edge_list ['A_4', 'G1_4', 'sa0']
['G1_4', 'fanout1_5', 'G1_5', 'FF1_ip_5']
edges [('G1_4', 'fanout1_5'), ('fanout1_5', 'G1_5'), ('G1_5', 'FF1_ip_5')]
i ('G1_4', 'fanout1_5')
i ('fanout1_5', 'G1_5')
i ('G1_5', 'FF1_ip_5')
G1_4 FF1_ip_5
X_path True
**********************Objective ********************
D_fronteir_list [('G1_4', 0)]
D_fronteir []
D_fronteir ['G1_4']
sort_D_fronteir
[('G1_4', 'fanout1_5')]
D_fronteir_list [('G1_4', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_4
**********************Backtrace ********************
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') 0 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 A_3 G1_3
Backtrace node A_3 G1_3 0 0
I_Stack.peek() ('A_4', 'G1_4') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_4', 'G1_4', 'sa0']
OUTPUT
G1_3 fanout1_4 0 0
A_4 G1_4 1 0
A_3 G1_3 0 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
G1_5 FF1_ip_5 x 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_5 G1_5 x 0
A_2 G1_2 0 0
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
fanout1_5 G1_5 1 0
fanout1_5 out1_5 1 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
A_1 G1_1 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_1 fanout1_2 0 0
G1_0 fanout1_1 0 0
G1_2 fanout1_3 0 0
G1_4 fanout1_5 1 0
One turn over try another
G_Seq1.No_of_Unroll 7
########################################################################################
########################################################################################
##########################################################
FF_op
FF1_op_0
FF_op
FF1_op_1
FF_op
FF1_op_2
FF_op
FF1_op_3
FF_op
FF1_op_4
FF_op
FF1_op_5
FF_op
FF1_op_6
list_ip_FF ['FF1_ip_0', 'FF1_ip_1', 'FF1_ip_2', 'FF1_ip_3', 'FF1_ip_4', 'FF1_ip_5']
list_op_FF ['FF1_op_1', 'FF1_op_2', 'FF1_op_3', 'FF1_op_4', 'FF1_op_5', 'FF1_op_6']
4
FF1_op_5
list_outedge ('FF1_op_5', 'fanout1_5')
3
FF1_op_4
list_outedge ('FF1_op_4', 'fanout1_4')
0
FF1_op_1
list_outedge ('FF1_op_1', 'fanout1_1')
1
FF1_op_2
list_outedge ('FF1_op_2', 'fanout1_2')
5
FF1_op_6
list_outedge ('FF1_op_6', 'fanout1_6')
2
FF1_op_3
list_outedge ('FF1_op_3', 'fanout1_3')
No_of_Unroll 7
faulty_node1_list ['A_0', 'A_1', 'A_2', 'A_3', 'A_4', 'A_5', 'A_6']
faulty_node2_list ['G1_0', 'G1_1', 'G1_2', 'G1_3', 'G1_4', 'G1_5', 'G1_6']
stuck_at_list ['sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0']
G1_6 FF1_ip_6 15 15 0
G1_2 fanout1_3 7 7 0
A_6 G1_6 1 1 14
A_4 G1_4 1 1 10
A_3 G1_3 1 1 8
A_0 G1_0 1 1 2
FF1_op_0 fanout1_0 1 1 0
A_1 G1_1 1 1 4
A_5 G1_5 1 1 12
A_2 G1_2 1 1 6
fanout1_6 out1_6 13 13 0
fanout1_6 G1_6 13 13 2
fanout1_4 G1_4 9 9 2
fanout1_4 out1_4 9 9 0
fanout1_5 G1_5 11 11 2
fanout1_5 out1_5 11 11 0
fanout1_2 out1_2 5 5 0
fanout1_2 G1_2 5 5 2
fanout1_3 out1_3 7 7 0
fanout1_3 G1_3 7 7 2
fanout1_0 G1_0 1 1 2
fanout1_0 out1_0 1 1 0
fanout1_1 G1_1 3 3 2
fanout1_1 out1_1 3 3 0
G1_5 fanout1_6 13 13 0
G1_1 fanout1_2 5 5 0
G1_0 fanout1_1 3 3 0
G1_3 fanout1_4 9 9 0
G1_4 fanout1_5 11 11 0
faulty_list ['A_5', 'G1_5', 'sa0']
faulty_edge_select 5
faulty_edge_list ['A_5', 'G1_5', 'sa0']
OUTPUT
G1_6 FF1_ip_6 x x
G1_2 fanout1_3 x x
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 x x
A_1 G1_1 x 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x x
fanout1_6 G1_6 x x
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
fanout1_5 G1_5 x x
fanout1_5 out1_5 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_5 fanout1_6 x x
G1_1 fanout1_2 x x
G1_0 fanout1_1 x x
G1_3 fanout1_4 x x
G1_4 fanout1_5 x x
PO_list [('G1_6', 'FF1_ip_6'), ('fanout1_1', 'out1_1'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_5', 'G1_5', 'sa0']
['G1_5', 'fanout1_6', 'G1_6', 'FF1_ip_6']
edges [('G1_5', 'fanout1_6'), ('fanout1_6', 'G1_6'), ('G1_6', 'FF1_ip_6')]
i ('G1_5', 'fanout1_6')
i ('fanout1_6', 'G1_6')
i ('G1_6', 'FF1_ip_6')
G1_5 FF1_ip_6
X_path True
**********************Objective ********************
D_fronteir_list []
**********************Backtrace ********************
Backtrace node A_5 G1_5 1 0
I_Stack.peek() ('A_5', 'G1_5') 1
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_5', 'G1_5', 'sa0']
OUTPUT
G1_6 FF1_ip_6 x x
G1_2 fanout1_3 x x
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 x x
A_1 G1_1 x 0
A_5 G1_5 1 0
A_2 G1_2 x 0
fanout1_6 out1_6 x x
fanout1_6 G1_6 x x
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
fanout1_5 G1_5 x x
fanout1_5 out1_5 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_5 fanout1_6 x x
G1_1 fanout1_2 x x
G1_0 fanout1_1 x x
G1_3 fanout1_4 x x
G1_4 fanout1_5 x x
One turn over try another
PO_list [('G1_6', 'FF1_ip_6'), ('fanout1_1', 'out1_1'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_5', 'G1_5', 'sa0']
['G1_5', 'fanout1_6', 'G1_6', 'FF1_ip_6']
edges [('G1_5', 'fanout1_6'), ('fanout1_6', 'G1_6'), ('G1_6', 'FF1_ip_6')]
i ('G1_5', 'fanout1_6')
i ('fanout1_6', 'G1_6')
i ('G1_6', 'FF1_ip_6')
G1_5 FF1_ip_6
X_path True
**********************Objective ********************
D_fronteir_list ['G1_5']
D_fronteir []
D_fronteir ['G1_5']
sort_D_fronteir
[('G1_5', 'fanout1_6')]
D_fronteir_list [('G1_5', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_5
**********************Backtrace ********************
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x x
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x x
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x x
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x x
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x x
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x x
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x x
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x x
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x x
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') x x
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
node1,node2 fanout1_0 G1_0
node1,node2 fanout1_0 G1_0
Before Backtrace ('FF1_op_0', 'fanout1_0') x x
None
After Backtrace ('FF1_op_0', 'fanout1_0') 0 0
None
node1,node2 FF1_op_0 fanout1_0
Backtrace node FF1_op_0 fanout1_0 0 0
I_Stack.peek() ('A_5', 'G1_5') 1
('FF1_op_0', 'fanout1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_5', 'G1_5', 'sa0']
OUTPUT
G1_6 FF1_ip_6 x 0
G1_2 fanout1_3 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_0 G1_0 x 0
FF1_op_0 fanout1_0 0 0
A_1 G1_1 x 0
A_5 G1_5 1 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 x 0
fanout1_1 out1_1 x 0
G1_5 fanout1_6 x 0
G1_1 fanout1_2 x 0
G1_0 fanout1_1 x 0
G1_3 fanout1_4 x 0
G1_4 fanout1_5 x 0
One turn over try another
PO_list [('G1_6', 'FF1_ip_6'), ('fanout1_1', 'out1_1'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_5', 'G1_5', 'sa0']
['G1_5', 'fanout1_6', 'G1_6', 'FF1_ip_6']
edges [('G1_5', 'fanout1_6'), ('fanout1_6', 'G1_6'), ('G1_6', 'FF1_ip_6')]
i ('G1_5', 'fanout1_6')
i ('fanout1_6', 'G1_6')
i ('G1_6', 'FF1_ip_6')
G1_5 FF1_ip_6
X_path True
**********************Objective ********************
D_fronteir_list [('G1_5', 0)]
D_fronteir []
D_fronteir ['G1_5']
sort_D_fronteir
[('G1_5', 'fanout1_6')]
D_fronteir_list [('G1_5', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_5
**********************Backtrace ********************
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x 0
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') 0 0
None
node1,node2 A_0 G1_0
Backtrace node A_0 G1_0 0 0
I_Stack.peek() ('A_5', 'G1_5') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_5', 'G1_5', 'sa0']
OUTPUT
G1_6 FF1_ip_6 x 0
G1_2 fanout1_3 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
A_1 G1_1 x 0
A_5 G1_5 1 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_1 fanout1_2 x 0
G1_0 fanout1_1 0 0
G1_3 fanout1_4 x 0
G1_4 fanout1_5 x 0
One turn over try another
PO_list [('G1_6', 'FF1_ip_6'), ('fanout1_1', 'out1_1'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_5', 'G1_5', 'sa0']
['G1_5', 'fanout1_6', 'G1_6', 'FF1_ip_6']
edges [('G1_5', 'fanout1_6'), ('fanout1_6', 'G1_6'), ('G1_6', 'FF1_ip_6')]
i ('G1_5', 'fanout1_6')
i ('fanout1_6', 'G1_6')
i ('G1_6', 'FF1_ip_6')
G1_5 FF1_ip_6
X_path True
**********************Objective ********************
D_fronteir_list [('G1_5', 0)]
D_fronteir []
D_fronteir ['G1_5']
sort_D_fronteir
[('G1_5', 'fanout1_6')]
D_fronteir_list [('G1_5', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_5
**********************Backtrace ********************
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') 0 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 A_1 G1_1
Backtrace node A_1 G1_1 0 0
I_Stack.peek() ('A_5', 'G1_5') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_5', 'G1_5', 'sa0']
OUTPUT
G1_6 FF1_ip_6 x 0
G1_2 fanout1_3 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
A_1 G1_1 0 0
A_5 G1_5 1 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_1 fanout1_2 0 0
G1_0 fanout1_1 0 0
G1_3 fanout1_4 x 0
G1_4 fanout1_5 x 0
One turn over try another
PO_list [('G1_6', 'FF1_ip_6'), ('fanout1_1', 'out1_1'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_5', 'G1_5', 'sa0']
['G1_5', 'fanout1_6', 'G1_6', 'FF1_ip_6']
edges [('G1_5', 'fanout1_6'), ('fanout1_6', 'G1_6'), ('G1_6', 'FF1_ip_6')]
i ('G1_5', 'fanout1_6')
i ('fanout1_6', 'G1_6')
i ('G1_6', 'FF1_ip_6')
G1_5 FF1_ip_6
X_path True
**********************Objective ********************
D_fronteir_list [('G1_5', 0)]
D_fronteir []
D_fronteir ['G1_5']
sort_D_fronteir
[('G1_5', 'fanout1_6')]
D_fronteir_list [('G1_5', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_5
**********************Backtrace ********************
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') 0 0
None
node1,node2 A_2 G1_2
Backtrace node A_2 G1_2 0 0
I_Stack.peek() ('A_5', 'G1_5') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_5', 'G1_5', 'sa0']
OUTPUT
G1_6 FF1_ip_6 x 0
G1_2 fanout1_3 0 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
A_1 G1_1 0 0
A_5 G1_5 1 0
A_2 G1_2 0 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_1 fanout1_2 0 0
G1_0 fanout1_1 0 0
G1_3 fanout1_4 x 0
G1_4 fanout1_5 x 0
One turn over try another
PO_list [('G1_6', 'FF1_ip_6'), ('fanout1_1', 'out1_1'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_5', 'G1_5', 'sa0']
['G1_5', 'fanout1_6', 'G1_6', 'FF1_ip_6']
edges [('G1_5', 'fanout1_6'), ('fanout1_6', 'G1_6'), ('G1_6', 'FF1_ip_6')]
i ('G1_5', 'fanout1_6')
i ('fanout1_6', 'G1_6')
i ('G1_6', 'FF1_ip_6')
G1_5 FF1_ip_6
X_path True
**********************Objective ********************
D_fronteir_list [('G1_5', 0)]
D_fronteir []
D_fronteir ['G1_5']
sort_D_fronteir
[('G1_5', 'fanout1_6')]
D_fronteir_list [('G1_5', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_5
**********************Backtrace ********************
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') 0 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 A_3 G1_3
Backtrace node A_3 G1_3 0 0
I_Stack.peek() ('A_5', 'G1_5') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_5', 'G1_5', 'sa0']
OUTPUT
G1_6 FF1_ip_6 x 0
G1_2 fanout1_3 0 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 0 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
A_1 G1_1 0 0
A_5 G1_5 1 0
A_2 G1_2 0 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_1 fanout1_2 0 0
G1_0 fanout1_1 0 0
G1_3 fanout1_4 0 0
G1_4 fanout1_5 x 0
One turn over try another
PO_list [('G1_6', 'FF1_ip_6'), ('fanout1_1', 'out1_1'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_5', 'G1_5', 'sa0']
['G1_5', 'fanout1_6', 'G1_6', 'FF1_ip_6']
edges [('G1_5', 'fanout1_6'), ('fanout1_6', 'G1_6'), ('G1_6', 'FF1_ip_6')]
i ('G1_5', 'fanout1_6')
i ('fanout1_6', 'G1_6')
i ('G1_6', 'FF1_ip_6')
G1_5 FF1_ip_6
X_path True
**********************Objective ********************
D_fronteir_list [('G1_5', 0)]
D_fronteir []
D_fronteir ['G1_5']
sort_D_fronteir
[('G1_5', 'fanout1_6')]
D_fronteir_list [('G1_5', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_5
**********************Backtrace ********************
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') 0 0
None
node1,node2 A_4 G1_4
Backtrace node A_4 G1_4 0 0
I_Stack.peek() ('A_5', 'G1_5') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
('A_4', 'G1_4') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_5', 'G1_5', 'sa0']
OUTPUT
G1_6 FF1_ip_6 x 0
G1_2 fanout1_3 0 0
A_6 G1_6 x 0
A_4 G1_4 0 0
A_3 G1_3 0 0
A_0 G1_0 0 0
FF1_op_0 fanout1_0 0 0
A_1 G1_1 0 0
A_5 G1_5 1 0
A_2 G1_2 0 0
fanout1_6 out1_6 1 0
fanout1_6 G1_6 1 0
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
fanout1_5 G1_5 0 0
fanout1_5 out1_5 0 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 1 0
G1_1 fanout1_2 0 0
G1_0 fanout1_1 0 0
G1_3 fanout1_4 0 0
G1_4 fanout1_5 0 0
One turn over try another
G_Seq1.No_of_Unroll 8
########################################################################################
########################################################################################
##########################################################
FF_op
FF1_op_0
FF_op
FF1_op_1
FF_op
FF1_op_2
FF_op
FF1_op_3
FF_op
FF1_op_4
FF_op
FF1_op_5
FF_op
FF1_op_6
FF_op
FF1_op_7
list_ip_FF ['FF1_ip_0', 'FF1_ip_1', 'FF1_ip_2', 'FF1_ip_3', 'FF1_ip_4', 'FF1_ip_5', 'FF1_ip_6']
list_op_FF ['FF1_op_1', 'FF1_op_2', 'FF1_op_3', 'FF1_op_4', 'FF1_op_5', 'FF1_op_6', 'FF1_op_7']
1
FF1_op_2
list_outedge ('FF1_op_2', 'fanout1_2')
5
FF1_op_6
list_outedge ('FF1_op_6', 'fanout1_6')
3
FF1_op_4
list_outedge ('FF1_op_4', 'fanout1_4')
0
FF1_op_1
list_outedge ('FF1_op_1', 'fanout1_1')
6
FF1_op_7
list_outedge ('FF1_op_7', 'fanout1_7')
4
FF1_op_5
list_outedge ('FF1_op_5', 'fanout1_5')
2
FF1_op_3
list_outedge ('FF1_op_3', 'fanout1_3')
No_of_Unroll 8
faulty_node1_list ['A_0', 'A_1', 'A_2', 'A_3', 'A_4', 'A_5', 'A_6', 'A_7']
faulty_node2_list ['G1_0', 'G1_1', 'G1_2', 'G1_3', 'G1_4', 'G1_5', 'G1_6', 'G1_7']
stuck_at_list ['sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0']
G1_1 fanout1_2 5 5 0
G1_3 fanout1_4 9 9 0
A_6 G1_6 1 1 14
A_4 G1_4 1 1 10
A_3 G1_3 1 1 8
FF1_op_0 fanout1_0 1 1 0
A_5 G1_5 1 1 12
A_7 G1_7 1 1 16
fanout1_3 out1_3 7 7 0
fanout1_3 G1_3 7 7 2
A_0 G1_0 1 1 2
A_2 G1_2 1 1 6
fanout1_6 out1_6 13 13 0
fanout1_6 G1_6 13 13 2
fanout1_7 out1_7 15 15 0
fanout1_7 G1_7 15 15 2
fanout1_4 G1_4 9 9 2
fanout1_4 out1_4 9 9 0
fanout1_5 G1_5 11 11 2
fanout1_5 out1_5 11 11 0
fanout1_2 out1_2 5 5 0
fanout1_2 G1_2 5 5 2
A_1 G1_1 1 1 4
fanout1_0 G1_0 1 1 2
fanout1_0 out1_0 1 1 0
fanout1_1 G1_1 3 3 2
fanout1_1 out1_1 3 3 0
G1_5 fanout1_6 13 13 0
G1_6 fanout1_7 15 15 0
G1_0 fanout1_1 3 3 0
G1_2 fanout1_3 7 7 0
G1_4 fanout1_5 11 11 0
G1_7 FF1_ip_7 17 17 0
faulty_list ['A_6', 'G1_6', 'sa0']
faulty_edge_select 6
faulty_edge_list ['A_6', 'G1_6', 'sa0']
OUTPUT
G1_1 fanout1_2 x x
G1_3 fanout1_4 x x
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 x x
A_5 G1_5 x 0
A_7 G1_7 x 0
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
A_0 G1_0 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x x
fanout1_6 G1_6 x x
fanout1_7 out1_7 x x
fanout1_7 G1_7 x x
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
fanout1_5 G1_5 x x
fanout1_5 out1_5 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
A_1 G1_1 x 0
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_5 fanout1_6 x x
G1_6 fanout1_7 x x
G1_0 fanout1_1 x x
G1_2 fanout1_3 x x
G1_4 fanout1_5 x x
G1_7 FF1_ip_7 x x
PO_list [('G1_7', 'FF1_ip_7'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_6', 'G1_6', 'sa0']
['G1_6', 'fanout1_7', 'G1_7', 'FF1_ip_7']
edges [('G1_6', 'fanout1_7'), ('fanout1_7', 'G1_7'), ('G1_7', 'FF1_ip_7')]
i ('G1_6', 'fanout1_7')
i ('fanout1_7', 'G1_7')
i ('G1_7', 'FF1_ip_7')
G1_6 FF1_ip_7
X_path True
**********************Objective ********************
D_fronteir_list []
**********************Backtrace ********************
Backtrace node A_6 G1_6 1 0
I_Stack.peek() ('A_6', 'G1_6') 1
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_6', 'G1_6', 'sa0']
OUTPUT
G1_1 fanout1_2 x x
G1_3 fanout1_4 x x
A_6 G1_6 1 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 x x
A_5 G1_5 x 0
A_7 G1_7 x 0
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
A_0 G1_0 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x x
fanout1_6 G1_6 x x
fanout1_7 out1_7 x x
fanout1_7 G1_7 x x
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
fanout1_5 G1_5 x x
fanout1_5 out1_5 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
A_1 G1_1 x 0
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_5 fanout1_6 x x
G1_6 fanout1_7 x x
G1_0 fanout1_1 x x
G1_2 fanout1_3 x x
G1_4 fanout1_5 x x
G1_7 FF1_ip_7 x x
One turn over try another
PO_list [('G1_7', 'FF1_ip_7'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_6', 'G1_6', 'sa0']
['G1_6', 'fanout1_7', 'G1_7', 'FF1_ip_7']
edges [('G1_6', 'fanout1_7'), ('fanout1_7', 'G1_7'), ('G1_7', 'FF1_ip_7')]
i ('G1_6', 'fanout1_7')
i ('fanout1_7', 'G1_7')
i ('G1_7', 'FF1_ip_7')
G1_6 FF1_ip_7
X_path True
**********************Objective ********************
D_fronteir_list ['G1_6']
D_fronteir []
D_fronteir ['G1_6']
sort_D_fronteir
[('G1_6', 'fanout1_7')]
D_fronteir_list [('G1_6', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_6
**********************Backtrace ********************
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x x
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x x
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x x
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x x
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x x
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x x
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x x
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x x
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x x
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x x
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x x
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') x x
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
node1,node2 fanout1_0 G1_0
node1,node2 fanout1_0 G1_0
Before Backtrace ('FF1_op_0', 'fanout1_0') x x
None
After Backtrace ('FF1_op_0', 'fanout1_0') 0 0
None
node1,node2 FF1_op_0 fanout1_0
Backtrace node FF1_op_0 fanout1_0 0 0
I_Stack.peek() ('A_6', 'G1_6') 1
('FF1_op_0', 'fanout1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_6', 'G1_6', 'sa0']
OUTPUT
G1_1 fanout1_2 x 0
G1_3 fanout1_4 x 0
A_6 G1_6 1 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 0 0
A_5 G1_5 x 0
A_7 G1_7 x 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_0 G1_0 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
A_1 G1_1 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 x 0
fanout1_1 out1_1 x 0
G1_5 fanout1_6 x 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 x 0
G1_2 fanout1_3 x 0
G1_4 fanout1_5 x 0
G1_7 FF1_ip_7 x 0
One turn over try another
PO_list [('G1_7', 'FF1_ip_7'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_6', 'G1_6', 'sa0']
['G1_6', 'fanout1_7', 'G1_7', 'FF1_ip_7']
edges [('G1_6', 'fanout1_7'), ('fanout1_7', 'G1_7'), ('G1_7', 'FF1_ip_7')]
i ('G1_6', 'fanout1_7')
i ('fanout1_7', 'G1_7')
i ('G1_7', 'FF1_ip_7')
G1_6 FF1_ip_7
X_path True
**********************Objective ********************
D_fronteir_list [('G1_6', 0)]
D_fronteir []
D_fronteir ['G1_6']
sort_D_fronteir
[('G1_6', 'fanout1_7')]
D_fronteir_list [('G1_6', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_6
**********************Backtrace ********************
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x 0
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') 0 0
None
node1,node2 A_0 G1_0
Backtrace node A_0 G1_0 0 0
I_Stack.peek() ('A_6', 'G1_6') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_6', 'G1_6', 'sa0']
OUTPUT
G1_1 fanout1_2 x 0
G1_3 fanout1_4 x 0
A_6 G1_6 1 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 0 0
A_5 G1_5 x 0
A_7 G1_7 x 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_0 G1_0 0 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
A_1 G1_1 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 0 0
G1_2 fanout1_3 x 0
G1_4 fanout1_5 x 0
G1_7 FF1_ip_7 x 0
One turn over try another
PO_list [('G1_7', 'FF1_ip_7'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_6', 'G1_6', 'sa0']
['G1_6', 'fanout1_7', 'G1_7', 'FF1_ip_7']
edges [('G1_6', 'fanout1_7'), ('fanout1_7', 'G1_7'), ('G1_7', 'FF1_ip_7')]
i ('G1_6', 'fanout1_7')
i ('fanout1_7', 'G1_7')
i ('G1_7', 'FF1_ip_7')
G1_6 FF1_ip_7
X_path True
**********************Objective ********************
D_fronteir_list [('G1_6', 0)]
D_fronteir []
D_fronteir ['G1_6']
sort_D_fronteir
[('G1_6', 'fanout1_7')]
D_fronteir_list [('G1_6', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_6
**********************Backtrace ********************
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') 0 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 A_1 G1_1
Backtrace node A_1 G1_1 0 0
I_Stack.peek() ('A_6', 'G1_6') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_6', 'G1_6', 'sa0']
OUTPUT
G1_1 fanout1_2 0 0
G1_3 fanout1_4 x 0
A_6 G1_6 1 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 0 0
A_5 G1_5 x 0
A_7 G1_7 x 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_0 G1_0 0 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
A_1 G1_1 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 0 0
G1_2 fanout1_3 x 0
G1_4 fanout1_5 x 0
G1_7 FF1_ip_7 x 0
One turn over try another
PO_list [('G1_7', 'FF1_ip_7'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_6', 'G1_6', 'sa0']
['G1_6', 'fanout1_7', 'G1_7', 'FF1_ip_7']
edges [('G1_6', 'fanout1_7'), ('fanout1_7', 'G1_7'), ('G1_7', 'FF1_ip_7')]
i ('G1_6', 'fanout1_7')
i ('fanout1_7', 'G1_7')
i ('G1_7', 'FF1_ip_7')
G1_6 FF1_ip_7
X_path True
**********************Objective ********************
D_fronteir_list [('G1_6', 0)]
D_fronteir []
D_fronteir ['G1_6']
sort_D_fronteir
[('G1_6', 'fanout1_7')]
D_fronteir_list [('G1_6', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_6
**********************Backtrace ********************
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') 0 0
None
node1,node2 A_2 G1_2
Backtrace node A_2 G1_2 0 0
I_Stack.peek() ('A_6', 'G1_6') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_6', 'G1_6', 'sa0']
OUTPUT
G1_1 fanout1_2 0 0
G1_3 fanout1_4 x 0
A_6 G1_6 1 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 0 0
A_5 G1_5 x 0
A_7 G1_7 x 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_0 G1_0 0 0
A_2 G1_2 0 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
A_1 G1_1 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 0 0
G1_2 fanout1_3 0 0
G1_4 fanout1_5 x 0
G1_7 FF1_ip_7 x 0
One turn over try another
PO_list [('G1_7', 'FF1_ip_7'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_6', 'G1_6', 'sa0']
['G1_6', 'fanout1_7', 'G1_7', 'FF1_ip_7']
edges [('G1_6', 'fanout1_7'), ('fanout1_7', 'G1_7'), ('G1_7', 'FF1_ip_7')]
i ('G1_6', 'fanout1_7')
i ('fanout1_7', 'G1_7')
i ('G1_7', 'FF1_ip_7')
G1_6 FF1_ip_7
X_path True
**********************Objective ********************
D_fronteir_list [('G1_6', 0)]
D_fronteir []
D_fronteir ['G1_6']
sort_D_fronteir
[('G1_6', 'fanout1_7')]
D_fronteir_list [('G1_6', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_6
**********************Backtrace ********************
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') 0 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 A_3 G1_3
Backtrace node A_3 G1_3 0 0
I_Stack.peek() ('A_6', 'G1_6') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_6', 'G1_6', 'sa0']
OUTPUT
G1_1 fanout1_2 0 0
G1_3 fanout1_4 0 0
A_6 G1_6 1 0
A_4 G1_4 x 0
A_3 G1_3 0 0
FF1_op_0 fanout1_0 0 0
A_5 G1_5 x 0
A_7 G1_7 x 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_0 G1_0 0 0
A_2 G1_2 0 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
A_1 G1_1 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 0 0
G1_2 fanout1_3 0 0
G1_4 fanout1_5 x 0
G1_7 FF1_ip_7 x 0
One turn over try another
PO_list [('G1_7', 'FF1_ip_7'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_6', 'G1_6', 'sa0']
['G1_6', 'fanout1_7', 'G1_7', 'FF1_ip_7']
edges [('G1_6', 'fanout1_7'), ('fanout1_7', 'G1_7'), ('G1_7', 'FF1_ip_7')]
i ('G1_6', 'fanout1_7')
i ('fanout1_7', 'G1_7')
i ('G1_7', 'FF1_ip_7')
G1_6 FF1_ip_7
X_path True
**********************Objective ********************
D_fronteir_list [('G1_6', 0)]
D_fronteir []
D_fronteir ['G1_6']
sort_D_fronteir
[('G1_6', 'fanout1_7')]
D_fronteir_list [('G1_6', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_6
**********************Backtrace ********************
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') 0 0
None
node1,node2 A_4 G1_4
Backtrace node A_4 G1_4 0 0
I_Stack.peek() ('A_6', 'G1_6') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
('A_4', 'G1_4') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_6', 'G1_6', 'sa0']
OUTPUT
G1_1 fanout1_2 0 0
G1_3 fanout1_4 0 0
A_6 G1_6 1 0
A_4 G1_4 0 0
A_3 G1_3 0 0
FF1_op_0 fanout1_0 0 0
A_5 G1_5 x 0
A_7 G1_7 x 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_0 G1_0 0 0
A_2 G1_2 0 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
fanout1_5 G1_5 0 0
fanout1_5 out1_5 0 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
A_1 G1_1 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 0 0
G1_2 fanout1_3 0 0
G1_4 fanout1_5 0 0
G1_7 FF1_ip_7 x 0
One turn over try another
PO_list [('G1_7', 'FF1_ip_7'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_6', 'G1_6', 'sa0']
['G1_6', 'fanout1_7', 'G1_7', 'FF1_ip_7']
edges [('G1_6', 'fanout1_7'), ('fanout1_7', 'G1_7'), ('G1_7', 'FF1_ip_7')]
i ('G1_6', 'fanout1_7')
i ('fanout1_7', 'G1_7')
i ('G1_7', 'FF1_ip_7')
G1_6 FF1_ip_7
X_path True
**********************Objective ********************
D_fronteir_list [('G1_6', 0)]
D_fronteir []
D_fronteir ['G1_6']
sort_D_fronteir
[('G1_6', 'fanout1_7')]
D_fronteir_list [('G1_6', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_6
**********************Backtrace ********************
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') 0 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 A_5 G1_5
Backtrace node A_5 G1_5 0 0
I_Stack.peek() ('A_6', 'G1_6') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
('A_4', 'G1_4') 0
('A_5', 'G1_5') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_6', 'G1_6', 'sa0']
OUTPUT
G1_1 fanout1_2 0 0
G1_3 fanout1_4 0 0
A_6 G1_6 1 0
A_4 G1_4 0 0
A_3 G1_3 0 0
FF1_op_0 fanout1_0 0 0
A_5 G1_5 0 0
A_7 G1_7 x 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_0 G1_0 0 0
A_2 G1_2 0 0
fanout1_6 out1_6 0 0
fanout1_6 G1_6 0 0
fanout1_7 out1_7 1 0
fanout1_7 G1_7 1 0
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
fanout1_5 G1_5 0 0
fanout1_5 out1_5 0 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
A_1 G1_1 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 0 0
G1_6 fanout1_7 1 0
G1_0 fanout1_1 0 0
G1_2 fanout1_3 0 0
G1_4 fanout1_5 0 0
G1_7 FF1_ip_7 x 0
One turn over try another
G_Seq1.No_of_Unroll 9
########################################################################################
########################################################################################
##########################################################
FF_op
FF1_op_8
FF_op
FF1_op_0
FF_op
FF1_op_1
FF_op
FF1_op_2
FF_op
FF1_op_3
FF_op
FF1_op_4
FF_op
FF1_op_5
FF_op
FF1_op_6
FF_op
FF1_op_7
list_ip_FF ['FF1_ip_0', 'FF1_ip_1', 'FF1_ip_2', 'FF1_ip_3', 'FF1_ip_4', 'FF1_ip_5', 'FF1_ip_6', 'FF1_ip_7']
list_op_FF ['FF1_op_1', 'FF1_op_2', 'FF1_op_3', 'FF1_op_4', 'FF1_op_5', 'FF1_op_6', 'FF1_op_7', 'FF1_op_8']
6
FF1_op_7
list_outedge ('FF1_op_7', 'fanout1_7')
3
FF1_op_4
list_outedge ('FF1_op_4', 'fanout1_4')
0
FF1_op_1
list_outedge ('FF1_op_1', 'fanout1_1')
1
FF1_op_2
list_outedge ('FF1_op_2', 'fanout1_2')
7
FF1_op_8
list_outedge ('FF1_op_8', 'fanout1_8')
5
FF1_op_6
list_outedge ('FF1_op_6', 'fanout1_6')
2
FF1_op_3
list_outedge ('FF1_op_3', 'fanout1_3')
4
FF1_op_5
list_outedge ('FF1_op_5', 'fanout1_5')
No_of_Unroll 9
faulty_node1_list ['A_0', 'A_1', 'A_2', 'A_3', 'A_4', 'A_5', 'A_6', 'A_7', 'A_8']
faulty_node2_list ['G1_0', 'G1_1', 'G1_2', 'G1_3', 'G1_4', 'G1_5', 'G1_6', 'G1_7', 'G1_8']
stuck_at_list ['sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0']
G1_6 fanout1_7 15 15 0
G1_4 fanout1_5 11 11 0
fanout1_8 G1_8 17 17 2
fanout1_8 out1_8 17 17 0
G1_0 fanout1_1 3 3 0
A_1 G1_1 1 1 4
G1_2 fanout1_3 7 7 0
G1_8 FF1_ip_8 19 19 0
A_6 G1_6 1 1 14
A_4 G1_4 1 1 10
A_3 G1_3 1 1 8
FF1_op_0 fanout1_0 1 1 0
A_8 G1_8 1 1 18
A_7 G1_7 1 1 16
A_5 G1_5 1 1 12
A_2 G1_2 1 1 6
fanout1_6 out1_6 13 13 0
fanout1_6 G1_6 13 13 2
fanout1_7 out1_7 15 15 0
fanout1_7 G1_7 15 15 2
fanout1_4 G1_4 9 9 2
fanout1_4 out1_4 9 9 0
fanout1_5 G1_5 11 11 2
fanout1_5 out1_5 11 11 0
fanout1_2 out1_2 5 5 0
fanout1_2 G1_2 5 5 2
fanout1_3 out1_3 7 7 0
fanout1_3 G1_3 7 7 2
fanout1_0 G1_0 1 1 2
fanout1_0 out1_0 1 1 0
fanout1_1 G1_1 3 3 2
fanout1_1 out1_1 3 3 0
G1_5 fanout1_6 13 13 0
G1_1 fanout1_2 5 5 0
G1_3 fanout1_4 9 9 0
A_0 G1_0 1 1 2
G1_7 fanout1_8 17 17 0
faulty_list ['A_7', 'G1_7', 'sa0']
faulty_edge_select 7
faulty_edge_list ['A_7', 'G1_7', 'sa0']
OUTPUT
G1_6 fanout1_7 x x
G1_4 fanout1_5 x x
fanout1_8 G1_8 x x
fanout1_8 out1_8 x x
G1_0 fanout1_1 x x
A_1 G1_1 x 0
G1_2 fanout1_3 x x
G1_8 FF1_ip_8 x x
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 x x
A_8 G1_8 x 0
A_7 G1_7 x 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x x
fanout1_6 G1_6 x x
fanout1_7 out1_7 x x
fanout1_7 G1_7 x x
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
fanout1_5 G1_5 x x
fanout1_5 out1_5 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_5 fanout1_6 x x
G1_1 fanout1_2 x x
G1_3 fanout1_4 x x
A_0 G1_0 x 0
G1_7 fanout1_8 x x
PO_list [('G1_8', 'FF1_ip_8'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_8', 'out1_8'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_7', 'G1_7', 'sa0']
['G1_7', 'fanout1_8', 'G1_8', 'FF1_ip_8']
edges [('G1_7', 'fanout1_8'), ('fanout1_8', 'G1_8'), ('G1_8', 'FF1_ip_8')]
i ('G1_7', 'fanout1_8')
i ('fanout1_8', 'G1_8')
i ('G1_8', 'FF1_ip_8')
G1_7 FF1_ip_8
X_path True
**********************Objective ********************
D_fronteir_list []
**********************Backtrace ********************
Backtrace node A_7 G1_7 1 0
I_Stack.peek() ('A_7', 'G1_7') 1
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_7', 'G1_7', 'sa0']
OUTPUT
G1_6 fanout1_7 x x
G1_4 fanout1_5 x x
fanout1_8 G1_8 x x
fanout1_8 out1_8 x x
G1_0 fanout1_1 x x
A_1 G1_1 x 0
G1_2 fanout1_3 x x
G1_8 FF1_ip_8 x x
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 x x
A_8 G1_8 x 0
A_7 G1_7 1 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x x
fanout1_6 G1_6 x x
fanout1_7 out1_7 x x
fanout1_7 G1_7 x x
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
fanout1_5 G1_5 x x
fanout1_5 out1_5 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_5 fanout1_6 x x
G1_1 fanout1_2 x x
G1_3 fanout1_4 x x
A_0 G1_0 x 0
G1_7 fanout1_8 x x
One turn over try another
PO_list [('G1_8', 'FF1_ip_8'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_8', 'out1_8'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_7', 'G1_7', 'sa0']
['G1_7', 'fanout1_8', 'G1_8', 'FF1_ip_8']
edges [('G1_7', 'fanout1_8'), ('fanout1_8', 'G1_8'), ('G1_8', 'FF1_ip_8')]
i ('G1_7', 'fanout1_8')
i ('fanout1_8', 'G1_8')
i ('G1_8', 'FF1_ip_8')
G1_7 FF1_ip_8
X_path True
**********************Objective ********************
D_fronteir_list ['G1_7']
D_fronteir []
D_fronteir ['G1_7']
sort_D_fronteir
[('G1_7', 'fanout1_8')]
D_fronteir_list [('G1_7', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_7
**********************Backtrace ********************
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x x
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x x
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x x
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x x
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x x
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x x
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x x
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x x
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x x
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x x
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x x
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x x
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x x
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') x x
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
node1,node2 fanout1_0 G1_0
node1,node2 fanout1_0 G1_0
Before Backtrace ('FF1_op_0', 'fanout1_0') x x
None
After Backtrace ('FF1_op_0', 'fanout1_0') 0 0
None
node1,node2 FF1_op_0 fanout1_0
Backtrace node FF1_op_0 fanout1_0 0 0
I_Stack.peek() ('A_7', 'G1_7') 1
('FF1_op_0', 'fanout1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_7', 'G1_7', 'sa0']
OUTPUT
G1_6 fanout1_7 x 0
G1_4 fanout1_5 x 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_0 fanout1_1 x 0
A_1 G1_1 x 0
G1_2 fanout1_3 x 0
G1_8 FF1_ip_8 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 0 0
A_8 G1_8 x 0
A_7 G1_7 1 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 x 0
fanout1_1 out1_1 x 0
G1_5 fanout1_6 x 0
G1_1 fanout1_2 x 0
G1_3 fanout1_4 x 0
A_0 G1_0 x 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_8', 'FF1_ip_8'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_8', 'out1_8'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_7', 'G1_7', 'sa0']
['G1_7', 'fanout1_8', 'G1_8', 'FF1_ip_8']
edges [('G1_7', 'fanout1_8'), ('fanout1_8', 'G1_8'), ('G1_8', 'FF1_ip_8')]
i ('G1_7', 'fanout1_8')
i ('fanout1_8', 'G1_8')
i ('G1_8', 'FF1_ip_8')
G1_7 FF1_ip_8
X_path True
**********************Objective ********************
D_fronteir_list [('G1_7', 0)]
D_fronteir []
D_fronteir ['G1_7']
sort_D_fronteir
[('G1_7', 'fanout1_8')]
D_fronteir_list [('G1_7', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_7
**********************Backtrace ********************
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x 0
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') 0 0
None
node1,node2 A_0 G1_0
Backtrace node A_0 G1_0 0 0
I_Stack.peek() ('A_7', 'G1_7') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_7', 'G1_7', 'sa0']
OUTPUT
G1_6 fanout1_7 x 0
G1_4 fanout1_5 x 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_0 fanout1_1 0 0
A_1 G1_1 x 0
G1_2 fanout1_3 x 0
G1_8 FF1_ip_8 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 0 0
A_8 G1_8 x 0
A_7 G1_7 1 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_1 fanout1_2 x 0
G1_3 fanout1_4 x 0
A_0 G1_0 0 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_8', 'FF1_ip_8'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_8', 'out1_8'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_7', 'G1_7', 'sa0']
['G1_7', 'fanout1_8', 'G1_8', 'FF1_ip_8']
edges [('G1_7', 'fanout1_8'), ('fanout1_8', 'G1_8'), ('G1_8', 'FF1_ip_8')]
i ('G1_7', 'fanout1_8')
i ('fanout1_8', 'G1_8')
i ('G1_8', 'FF1_ip_8')
G1_7 FF1_ip_8
X_path True
**********************Objective ********************
D_fronteir_list [('G1_7', 0)]
D_fronteir []
D_fronteir ['G1_7']
sort_D_fronteir
[('G1_7', 'fanout1_8')]
D_fronteir_list [('G1_7', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_7
**********************Backtrace ********************
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') 0 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 A_1 G1_1
Backtrace node A_1 G1_1 0 0
I_Stack.peek() ('A_7', 'G1_7') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_7', 'G1_7', 'sa0']
OUTPUT
G1_6 fanout1_7 x 0
G1_4 fanout1_5 x 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_0 fanout1_1 0 0
A_1 G1_1 0 0
G1_2 fanout1_3 x 0
G1_8 FF1_ip_8 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 0 0
A_8 G1_8 x 0
A_7 G1_7 1 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_1 fanout1_2 0 0
G1_3 fanout1_4 x 0
A_0 G1_0 0 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_8', 'FF1_ip_8'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_8', 'out1_8'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_7', 'G1_7', 'sa0']
['G1_7', 'fanout1_8', 'G1_8', 'FF1_ip_8']
edges [('G1_7', 'fanout1_8'), ('fanout1_8', 'G1_8'), ('G1_8', 'FF1_ip_8')]
i ('G1_7', 'fanout1_8')
i ('fanout1_8', 'G1_8')
i ('G1_8', 'FF1_ip_8')
G1_7 FF1_ip_8
X_path True
**********************Objective ********************
D_fronteir_list [('G1_7', 0)]
D_fronteir []
D_fronteir ['G1_7']
sort_D_fronteir
[('G1_7', 'fanout1_8')]
D_fronteir_list [('G1_7', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_7
**********************Backtrace ********************
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') 0 0
None
node1,node2 A_2 G1_2
Backtrace node A_2 G1_2 0 0
I_Stack.peek() ('A_7', 'G1_7') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_7', 'G1_7', 'sa0']
OUTPUT
G1_6 fanout1_7 x 0
G1_4 fanout1_5 x 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_0 fanout1_1 0 0
A_1 G1_1 0 0
G1_2 fanout1_3 0 0
G1_8 FF1_ip_8 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
FF1_op_0 fanout1_0 0 0
A_8 G1_8 x 0
A_7 G1_7 1 0
A_5 G1_5 x 0
A_2 G1_2 0 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_1 fanout1_2 0 0
G1_3 fanout1_4 x 0
A_0 G1_0 0 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_8', 'FF1_ip_8'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_8', 'out1_8'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_7', 'G1_7', 'sa0']
['G1_7', 'fanout1_8', 'G1_8', 'FF1_ip_8']
edges [('G1_7', 'fanout1_8'), ('fanout1_8', 'G1_8'), ('G1_8', 'FF1_ip_8')]
i ('G1_7', 'fanout1_8')
i ('fanout1_8', 'G1_8')
i ('G1_8', 'FF1_ip_8')
G1_7 FF1_ip_8
X_path True
**********************Objective ********************
D_fronteir_list [('G1_7', 0)]
D_fronteir []
D_fronteir ['G1_7']
sort_D_fronteir
[('G1_7', 'fanout1_8')]
D_fronteir_list [('G1_7', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_7
**********************Backtrace ********************
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') 0 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 A_3 G1_3
Backtrace node A_3 G1_3 0 0
I_Stack.peek() ('A_7', 'G1_7') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_7', 'G1_7', 'sa0']
OUTPUT
G1_6 fanout1_7 x 0
G1_4 fanout1_5 x 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_0 fanout1_1 0 0
A_1 G1_1 0 0
G1_2 fanout1_3 0 0
G1_8 FF1_ip_8 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 0 0
FF1_op_0 fanout1_0 0 0
A_8 G1_8 x 0
A_7 G1_7 1 0
A_5 G1_5 x 0
A_2 G1_2 0 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_1 fanout1_2 0 0
G1_3 fanout1_4 0 0
A_0 G1_0 0 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_8', 'FF1_ip_8'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_8', 'out1_8'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_7', 'G1_7', 'sa0']
['G1_7', 'fanout1_8', 'G1_8', 'FF1_ip_8']
edges [('G1_7', 'fanout1_8'), ('fanout1_8', 'G1_8'), ('G1_8', 'FF1_ip_8')]
i ('G1_7', 'fanout1_8')
i ('fanout1_8', 'G1_8')
i ('G1_8', 'FF1_ip_8')
G1_7 FF1_ip_8
X_path True
**********************Objective ********************
D_fronteir_list [('G1_7', 0)]
D_fronteir []
D_fronteir ['G1_7']
sort_D_fronteir
[('G1_7', 'fanout1_8')]
D_fronteir_list [('G1_7', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_7
**********************Backtrace ********************
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') 0 0
None
node1,node2 A_4 G1_4
Backtrace node A_4 G1_4 0 0
I_Stack.peek() ('A_7', 'G1_7') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
('A_4', 'G1_4') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_7', 'G1_7', 'sa0']
OUTPUT
G1_6 fanout1_7 x 0
G1_4 fanout1_5 0 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_0 fanout1_1 0 0
A_1 G1_1 0 0
G1_2 fanout1_3 0 0
G1_8 FF1_ip_8 x 0
A_6 G1_6 x 0
A_4 G1_4 0 0
A_3 G1_3 0 0
FF1_op_0 fanout1_0 0 0
A_8 G1_8 x 0
A_7 G1_7 1 0
A_5 G1_5 x 0
A_2 G1_2 0 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
fanout1_5 G1_5 0 0
fanout1_5 out1_5 0 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_1 fanout1_2 0 0
G1_3 fanout1_4 0 0
A_0 G1_0 0 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_8', 'FF1_ip_8'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_8', 'out1_8'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_7', 'G1_7', 'sa0']
['G1_7', 'fanout1_8', 'G1_8', 'FF1_ip_8']
edges [('G1_7', 'fanout1_8'), ('fanout1_8', 'G1_8'), ('G1_8', 'FF1_ip_8')]
i ('G1_7', 'fanout1_8')
i ('fanout1_8', 'G1_8')
i ('G1_8', 'FF1_ip_8')
G1_7 FF1_ip_8
X_path True
**********************Objective ********************
D_fronteir_list [('G1_7', 0)]
D_fronteir []
D_fronteir ['G1_7']
sort_D_fronteir
[('G1_7', 'fanout1_8')]
D_fronteir_list [('G1_7', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_7
**********************Backtrace ********************
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') 0 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 A_5 G1_5
Backtrace node A_5 G1_5 0 0
I_Stack.peek() ('A_7', 'G1_7') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
('A_4', 'G1_4') 0
('A_5', 'G1_5') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_7', 'G1_7', 'sa0']
OUTPUT
G1_6 fanout1_7 x 0
G1_4 fanout1_5 0 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_0 fanout1_1 0 0
A_1 G1_1 0 0
G1_2 fanout1_3 0 0
G1_8 FF1_ip_8 x 0
A_6 G1_6 x 0
A_4 G1_4 0 0
A_3 G1_3 0 0
FF1_op_0 fanout1_0 0 0
A_8 G1_8 x 0
A_7 G1_7 1 0
A_5 G1_5 0 0
A_2 G1_2 0 0
fanout1_6 out1_6 0 0
fanout1_6 G1_6 0 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
fanout1_5 G1_5 0 0
fanout1_5 out1_5 0 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 0 0
G1_1 fanout1_2 0 0
G1_3 fanout1_4 0 0
A_0 G1_0 0 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_8', 'FF1_ip_8'), ('fanout1_6', 'out1_6'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_0', 'out1_0'), ('fanout1_1', 'out1_1'), ('fanout1_8', 'out1_8'), ('fanout1_7', 'out1_7'), ('fanout1_5', 'out1_5'), ('fanout1_2', 'out1_2')]
faulty_edge_list ['A_7', 'G1_7', 'sa0']
['G1_7', 'fanout1_8', 'G1_8', 'FF1_ip_8']
edges [('G1_7', 'fanout1_8'), ('fanout1_8', 'G1_8'), ('G1_8', 'FF1_ip_8')]
i ('G1_7', 'fanout1_8')
i ('fanout1_8', 'G1_8')
i ('G1_8', 'FF1_ip_8')
G1_7 FF1_ip_8
X_path True
**********************Objective ********************
D_fronteir_list [('G1_7', 0)]
D_fronteir []
D_fronteir ['G1_7']
sort_D_fronteir
[('G1_7', 'fanout1_8')]
D_fronteir_list [('G1_7', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_7
**********************Backtrace ********************
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') 0 0
None
node1,node2 A_6 G1_6
Backtrace node A_6 G1_6 0 0
I_Stack.peek() ('A_7', 'G1_7') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
('A_4', 'G1_4') 0
('A_5', 'G1_5') 0
('A_6', 'G1_6') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_7', 'G1_7', 'sa0']
OUTPUT
G1_6 fanout1_7 0 0
G1_4 fanout1_5 0 0
fanout1_8 G1_8 1 0
fanout1_8 out1_8 1 0
G1_0 fanout1_1 0 0
A_1 G1_1 0 0
G1_2 fanout1_3 0 0
G1_8 FF1_ip_8 x 0
A_6 G1_6 0 0
A_4 G1_4 0 0
A_3 G1_3 0 0
FF1_op_0 fanout1_0 0 0
A_8 G1_8 x 0
A_7 G1_7 1 0
A_5 G1_5 0 0
A_2 G1_2 0 0
fanout1_6 out1_6 0 0
fanout1_6 G1_6 0 0
fanout1_7 out1_7 0 0
fanout1_7 G1_7 0 0
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
fanout1_5 G1_5 0 0
fanout1_5 out1_5 0 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 0 0
G1_1 fanout1_2 0 0
G1_3 fanout1_4 0 0
A_0 G1_0 0 0
G1_7 fanout1_8 1 0
One turn over try another
G_Seq1.No_of_Unroll 10
########################################################################################
########################################################################################
##########################################################
FF_op
FF1_op_8
FF_op
FF1_op_0
FF_op
FF1_op_1
FF_op
FF1_op_2
FF_op
FF1_op_3
FF_op
FF1_op_4
FF_op
FF1_op_5
FF_op
FF1_op_6
FF_op
FF1_op_7
FF_op
FF1_op_9
list_ip_FF ['FF1_ip_0', 'FF1_ip_1', 'FF1_ip_2', 'FF1_ip_3', 'FF1_ip_4', 'FF1_ip_5', 'FF1_ip_6', 'FF1_ip_7', 'FF1_ip_8']
list_op_FF ['FF1_op_1', 'FF1_op_2', 'FF1_op_3', 'FF1_op_4', 'FF1_op_5', 'FF1_op_6', 'FF1_op_7', 'FF1_op_8', 'FF1_op_9']
1
FF1_op_2
list_outedge ('FF1_op_2', 'fanout1_2')
7
FF1_op_8
list_outedge ('FF1_op_8', 'fanout1_8')
5
FF1_op_6
list_outedge ('FF1_op_6', 'fanout1_6')
8
FF1_op_9
list_outedge ('FF1_op_9', 'fanout1_9')
0
FF1_op_1
list_outedge ('FF1_op_1', 'fanout1_1')
6
FF1_op_7
list_outedge ('FF1_op_7', 'fanout1_7')
2
FF1_op_3
list_outedge ('FF1_op_3', 'fanout1_3')
4
FF1_op_5
list_outedge ('FF1_op_5', 'fanout1_5')
3
FF1_op_4
list_outedge ('FF1_op_4', 'fanout1_4')
No_of_Unroll 10
faulty_node1_list ['A_0', 'A_1', 'A_2', 'A_3', 'A_4', 'A_5', 'A_6', 'A_7', 'A_8', 'A_9']
faulty_node2_list ['G1_0', 'G1_1', 'G1_2', 'G1_3', 'G1_4', 'G1_5', 'G1_6', 'G1_7', 'G1_8', 'G1_9']
stuck_at_list ['sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0', 'sa0']
fanout1_4 G1_4 9 9 2
fanout1_4 out1_4 9 9 0
G1_9 FF1_ip_9 21 21 0
G1_1 fanout1_2 5 5 0
fanout1_9 G1_9 19 19 2
fanout1_9 out1_9 19 19 0
A_8 G1_8 1 1 18
G1_3 fanout1_4 9 9 0
A_9 G1_9 1 1 20
A_6 G1_6 1 1 14
A_4 G1_4 1 1 10
A_3 G1_3 1 1 8
A_1 G1_1 1 1 4
FF1_op_0 fanout1_0 1 1 0
A_0 G1_0 1 1 2
fanout1_3 out1_3 7 7 0
fanout1_3 G1_3 7 7 2
A_5 G1_5 1 1 12
A_2 G1_2 1 1 6
fanout1_6 out1_6 13 13 0
fanout1_6 G1_6 13 13 2
fanout1_7 out1_7 15 15 0
fanout1_7 G1_7 15 15 2
fanout1_5 G1_5 11 11 2
fanout1_5 out1_5 11 11 0
fanout1_2 out1_2 5 5 0
fanout1_2 G1_2 5 5 2
G1_8 fanout1_9 19 19 0
fanout1_0 G1_0 1 1 2
fanout1_0 out1_0 1 1 0
fanout1_1 G1_1 3 3 2
fanout1_1 out1_1 3 3 0
G1_5 fanout1_6 13 13 0
G1_4 fanout1_5 11 11 0
G1_6 fanout1_7 15 15 0
G1_0 fanout1_1 3 3 0
fanout1_8 G1_8 17 17 2
fanout1_8 out1_8 17 17 0
G1_2 fanout1_3 7 7 0
A_7 G1_7 1 1 16
G1_7 fanout1_8 17 17 0
faulty_list ['A_8', 'G1_8', 'sa0']
faulty_edge_select 8
faulty_edge_list ['A_8', 'G1_8', 'sa0']
OUTPUT
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
G1_9 FF1_ip_9 x x
G1_1 fanout1_2 x x
fanout1_9 G1_9 x x
fanout1_9 out1_9 x x
A_8 G1_8 x 0
G1_3 fanout1_4 x x
A_9 G1_9 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_1 G1_1 x 0
FF1_op_0 fanout1_0 x x
A_0 G1_0 x 0
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x x
fanout1_6 G1_6 x x
fanout1_7 out1_7 x x
fanout1_7 G1_7 x x
fanout1_5 G1_5 x x
fanout1_5 out1_5 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
G1_8 fanout1_9 x x
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_5 fanout1_6 x x
G1_4 fanout1_5 x x
G1_6 fanout1_7 x x
G1_0 fanout1_1 x x
fanout1_8 G1_8 x x
fanout1_8 out1_8 x x
G1_2 fanout1_3 x x
A_7 G1_7 x 0
G1_7 fanout1_8 x x
PO_list [('G1_9', 'FF1_ip_9'), ('fanout1_8', 'out1_8'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_1', 'out1_1'), ('fanout1_9', 'out1_9'), ('fanout1_6', 'out1_6'), ('fanout1_7', 'out1_7'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_5', 'out1_5')]
faulty_edge_list ['A_8', 'G1_8', 'sa0']
['G1_8', 'fanout1_9', 'G1_9', 'FF1_ip_9']
edges [('G1_8', 'fanout1_9'), ('fanout1_9', 'G1_9'), ('G1_9', 'FF1_ip_9')]
i ('G1_8', 'fanout1_9')
i ('fanout1_9', 'G1_9')
i ('G1_9', 'FF1_ip_9')
G1_8 FF1_ip_9
X_path True
**********************Objective ********************
D_fronteir_list []
**********************Backtrace ********************
Backtrace node A_8 G1_8 1 0
I_Stack.peek() ('A_8', 'G1_8') 1
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_8', 'G1_8', 'sa0']
OUTPUT
fanout1_4 G1_4 x x
fanout1_4 out1_4 x x
G1_9 FF1_ip_9 x x
G1_1 fanout1_2 x x
fanout1_9 G1_9 x x
fanout1_9 out1_9 x x
A_8 G1_8 1 0
G1_3 fanout1_4 x x
A_9 G1_9 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_1 G1_1 x 0
FF1_op_0 fanout1_0 x x
A_0 G1_0 x 0
fanout1_3 out1_3 x x
fanout1_3 G1_3 x x
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x x
fanout1_6 G1_6 x x
fanout1_7 out1_7 x x
fanout1_7 G1_7 x x
fanout1_5 G1_5 x x
fanout1_5 out1_5 x x
fanout1_2 out1_2 x x
fanout1_2 G1_2 x x
G1_8 fanout1_9 x x
fanout1_0 G1_0 x x
fanout1_0 out1_0 x x
fanout1_1 G1_1 x x
fanout1_1 out1_1 x x
G1_5 fanout1_6 x x
G1_4 fanout1_5 x x
G1_6 fanout1_7 x x
G1_0 fanout1_1 x x
fanout1_8 G1_8 x x
fanout1_8 out1_8 x x
G1_2 fanout1_3 x x
A_7 G1_7 x 0
G1_7 fanout1_8 x x
One turn over try another
PO_list [('G1_9', 'FF1_ip_9'), ('fanout1_8', 'out1_8'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_1', 'out1_1'), ('fanout1_9', 'out1_9'), ('fanout1_6', 'out1_6'), ('fanout1_7', 'out1_7'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_5', 'out1_5')]
faulty_edge_list ['A_8', 'G1_8', 'sa0']
['G1_8', 'fanout1_9', 'G1_9', 'FF1_ip_9']
edges [('G1_8', 'fanout1_9'), ('fanout1_9', 'G1_9'), ('G1_9', 'FF1_ip_9')]
i ('G1_8', 'fanout1_9')
i ('fanout1_9', 'G1_9')
i ('G1_9', 'FF1_ip_9')
G1_8 FF1_ip_9
X_path True
**********************Objective ********************
D_fronteir_list ['G1_8']
D_fronteir []
D_fronteir ['G1_8']
sort_D_fronteir
[('G1_8', 'fanout1_9')]
D_fronteir_list [('G1_8', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_8
**********************Backtrace ********************
node1,node2 fanout1_8 G1_8
Before Backtrace ('G1_7', 'fanout1_8') x x
None
After Backtrace ('G1_7', 'fanout1_8') 0 0
None
node1,node2 G1_7 fanout1_8
node1,node2 G1_7 fanout1_8
Before Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') x x
None
G.nodes[node1]['gatetype'] G1_7
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_7', 'G1_7')
After Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') 0 0
None
node1,node2 fanout1_7 G1_7
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x x
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x x
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x x
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x x
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x x
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x x
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x x
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x x
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x x
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x x
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x x
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x x
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x x
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') x x
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
node1,node2 fanout1_0 G1_0
node1,node2 fanout1_0 G1_0
Before Backtrace ('FF1_op_0', 'fanout1_0') x x
None
After Backtrace ('FF1_op_0', 'fanout1_0') 0 0
None
node1,node2 FF1_op_0 fanout1_0
Backtrace node FF1_op_0 fanout1_0 0 0
I_Stack.peek() ('A_8', 'G1_8') 1
('FF1_op_0', 'fanout1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_8', 'G1_8', 'sa0']
OUTPUT
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
G1_9 FF1_ip_9 x 0
G1_1 fanout1_2 x 0
fanout1_9 G1_9 x 0
fanout1_9 out1_9 x 0
A_8 G1_8 1 0
G1_3 fanout1_4 x 0
A_9 G1_9 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_1 G1_1 x 0
FF1_op_0 fanout1_0 0 0
A_0 G1_0 x 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
G1_8 fanout1_9 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 x 0
fanout1_1 out1_1 x 0
G1_5 fanout1_6 x 0
G1_4 fanout1_5 x 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 x 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_2 fanout1_3 x 0
A_7 G1_7 x 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_9', 'FF1_ip_9'), ('fanout1_8', 'out1_8'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_1', 'out1_1'), ('fanout1_9', 'out1_9'), ('fanout1_6', 'out1_6'), ('fanout1_7', 'out1_7'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_5', 'out1_5')]
faulty_edge_list ['A_8', 'G1_8', 'sa0']
['G1_8', 'fanout1_9', 'G1_9', 'FF1_ip_9']
edges [('G1_8', 'fanout1_9'), ('fanout1_9', 'G1_9'), ('G1_9', 'FF1_ip_9')]
i ('G1_8', 'fanout1_9')
i ('fanout1_9', 'G1_9')
i ('G1_9', 'FF1_ip_9')
G1_8 FF1_ip_9
X_path True
**********************Objective ********************
D_fronteir_list [('G1_8', 0)]
D_fronteir []
D_fronteir ['G1_8']
sort_D_fronteir
[('G1_8', 'fanout1_9')]
D_fronteir_list [('G1_8', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_8
**********************Backtrace ********************
node1,node2 fanout1_8 G1_8
Before Backtrace ('G1_7', 'fanout1_8') x 0
None
After Backtrace ('G1_7', 'fanout1_8') 0 0
None
node1,node2 G1_7 fanout1_8
node1,node2 G1_7 fanout1_8
Before Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') x 0
None
G.nodes[node1]['gatetype'] G1_7
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_7', 'G1_7')
After Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') 0 0
None
node1,node2 fanout1_7 G1_7
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') x 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 fanout1_1 G1_1
node1,node2 fanout1_1 G1_1
Before Backtrace ('G1_0', 'fanout1_1') x 0
None
After Backtrace ('G1_0', 'fanout1_1') 0 0
None
node1,node2 G1_0 fanout1_1
node1,node2 G1_0 fanout1_1
Before Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') x 0
None
G.nodes[node1]['gatetype'] G1_0
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_0', 'G1_0')
After Backtrace ('fanout1_0', 'G1_0') 0 0
('A_0', 'G1_0') 0 0
None
node1,node2 A_0 G1_0
Backtrace node A_0 G1_0 0 0
I_Stack.peek() ('A_8', 'G1_8') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_8', 'G1_8', 'sa0']
OUTPUT
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
G1_9 FF1_ip_9 x 0
G1_1 fanout1_2 x 0
fanout1_9 G1_9 x 0
fanout1_9 out1_9 x 0
A_8 G1_8 1 0
G1_3 fanout1_4 x 0
A_9 G1_9 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_1 G1_1 x 0
FF1_op_0 fanout1_0 0 0
A_0 G1_0 0 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 x 0
fanout1_2 G1_2 x 0
G1_8 fanout1_9 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_4 fanout1_5 x 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 0 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_2 fanout1_3 x 0
A_7 G1_7 x 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_9', 'FF1_ip_9'), ('fanout1_8', 'out1_8'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_1', 'out1_1'), ('fanout1_9', 'out1_9'), ('fanout1_6', 'out1_6'), ('fanout1_7', 'out1_7'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_5', 'out1_5')]
faulty_edge_list ['A_8', 'G1_8', 'sa0']
['G1_8', 'fanout1_9', 'G1_9', 'FF1_ip_9']
edges [('G1_8', 'fanout1_9'), ('fanout1_9', 'G1_9'), ('G1_9', 'FF1_ip_9')]
i ('G1_8', 'fanout1_9')
i ('fanout1_9', 'G1_9')
i ('G1_9', 'FF1_ip_9')
G1_8 FF1_ip_9
X_path True
**********************Objective ********************
D_fronteir_list [('G1_8', 0)]
D_fronteir []
D_fronteir ['G1_8']
sort_D_fronteir
[('G1_8', 'fanout1_9')]
D_fronteir_list [('G1_8', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_8
**********************Backtrace ********************
node1,node2 fanout1_8 G1_8
Before Backtrace ('G1_7', 'fanout1_8') x 0
None
After Backtrace ('G1_7', 'fanout1_8') 0 0
None
node1,node2 G1_7 fanout1_8
node1,node2 G1_7 fanout1_8
Before Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') x 0
None
G.nodes[node1]['gatetype'] G1_7
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_7', 'G1_7')
After Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') 0 0
None
node1,node2 fanout1_7 G1_7
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') x 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
node1,node2 fanout1_2 G1_2
node1,node2 fanout1_2 G1_2
Before Backtrace ('G1_1', 'fanout1_2') x 0
None
After Backtrace ('G1_1', 'fanout1_2') 0 0
None
node1,node2 G1_1 fanout1_2
node1,node2 G1_1 fanout1_2
Before Backtrace ('A_1', 'G1_1') x 0
('fanout1_1', 'G1_1') 0 0
None
G.nodes[node1]['gatetype'] G1_1
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_1', 'G1_1')
After Backtrace ('A_1', 'G1_1') 0 0
('fanout1_1', 'G1_1') 0 0
None
node1,node2 A_1 G1_1
Backtrace node A_1 G1_1 0 0
I_Stack.peek() ('A_8', 'G1_8') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_8', 'G1_8', 'sa0']
OUTPUT
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
G1_9 FF1_ip_9 x 0
G1_1 fanout1_2 0 0
fanout1_9 G1_9 x 0
fanout1_9 out1_9 x 0
A_8 G1_8 1 0
G1_3 fanout1_4 x 0
A_9 G1_9 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_1 G1_1 0 0
FF1_op_0 fanout1_0 0 0
A_0 G1_0 0 0
fanout1_3 out1_3 x 0
fanout1_3 G1_3 x 0
A_5 G1_5 x 0
A_2 G1_2 x 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
G1_8 fanout1_9 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_4 fanout1_5 x 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 0 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_2 fanout1_3 x 0
A_7 G1_7 x 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_9', 'FF1_ip_9'), ('fanout1_8', 'out1_8'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_1', 'out1_1'), ('fanout1_9', 'out1_9'), ('fanout1_6', 'out1_6'), ('fanout1_7', 'out1_7'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_5', 'out1_5')]
faulty_edge_list ['A_8', 'G1_8', 'sa0']
['G1_8', 'fanout1_9', 'G1_9', 'FF1_ip_9']
edges [('G1_8', 'fanout1_9'), ('fanout1_9', 'G1_9'), ('G1_9', 'FF1_ip_9')]
i ('G1_8', 'fanout1_9')
i ('fanout1_9', 'G1_9')
i ('G1_9', 'FF1_ip_9')
G1_8 FF1_ip_9
X_path True
**********************Objective ********************
D_fronteir_list [('G1_8', 0)]
D_fronteir []
D_fronteir ['G1_8']
sort_D_fronteir
[('G1_8', 'fanout1_9')]
D_fronteir_list [('G1_8', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_8
**********************Backtrace ********************
node1,node2 fanout1_8 G1_8
Before Backtrace ('G1_7', 'fanout1_8') x 0
None
After Backtrace ('G1_7', 'fanout1_8') 0 0
None
node1,node2 G1_7 fanout1_8
node1,node2 G1_7 fanout1_8
Before Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') x 0
None
G.nodes[node1]['gatetype'] G1_7
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_7', 'G1_7')
After Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') 0 0
None
node1,node2 fanout1_7 G1_7
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') x 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 fanout1_3 G1_3
node1,node2 fanout1_3 G1_3
Before Backtrace ('G1_2', 'fanout1_3') x 0
None
After Backtrace ('G1_2', 'fanout1_3') 0 0
None
node1,node2 G1_2 fanout1_3
node1,node2 G1_2 fanout1_3
Before Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') x 0
None
G.nodes[node1]['gatetype'] G1_2
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_2', 'G1_2')
After Backtrace ('fanout1_2', 'G1_2') 0 0
('A_2', 'G1_2') 0 0
None
node1,node2 A_2 G1_2
Backtrace node A_2 G1_2 0 0
I_Stack.peek() ('A_8', 'G1_8') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_8', 'G1_8', 'sa0']
OUTPUT
fanout1_4 G1_4 x 0
fanout1_4 out1_4 x 0
G1_9 FF1_ip_9 x 0
G1_1 fanout1_2 0 0
fanout1_9 G1_9 x 0
fanout1_9 out1_9 x 0
A_8 G1_8 1 0
G1_3 fanout1_4 x 0
A_9 G1_9 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 x 0
A_1 G1_1 0 0
FF1_op_0 fanout1_0 0 0
A_0 G1_0 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_5 G1_5 x 0
A_2 G1_2 0 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
G1_8 fanout1_9 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_4 fanout1_5 x 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 0 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_2 fanout1_3 0 0
A_7 G1_7 x 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_9', 'FF1_ip_9'), ('fanout1_8', 'out1_8'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_1', 'out1_1'), ('fanout1_9', 'out1_9'), ('fanout1_6', 'out1_6'), ('fanout1_7', 'out1_7'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_5', 'out1_5')]
faulty_edge_list ['A_8', 'G1_8', 'sa0']
['G1_8', 'fanout1_9', 'G1_9', 'FF1_ip_9']
edges [('G1_8', 'fanout1_9'), ('fanout1_9', 'G1_9'), ('G1_9', 'FF1_ip_9')]
i ('G1_8', 'fanout1_9')
i ('fanout1_9', 'G1_9')
i ('G1_9', 'FF1_ip_9')
G1_8 FF1_ip_9
X_path True
**********************Objective ********************
D_fronteir_list [('G1_8', 0)]
D_fronteir []
D_fronteir ['G1_8']
sort_D_fronteir
[('G1_8', 'fanout1_9')]
D_fronteir_list [('G1_8', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_8
**********************Backtrace ********************
node1,node2 fanout1_8 G1_8
Before Backtrace ('G1_7', 'fanout1_8') x 0
None
After Backtrace ('G1_7', 'fanout1_8') 0 0
None
node1,node2 G1_7 fanout1_8
node1,node2 G1_7 fanout1_8
Before Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') x 0
None
G.nodes[node1]['gatetype'] G1_7
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_7', 'G1_7')
After Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') 0 0
None
node1,node2 fanout1_7 G1_7
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') x 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
node1,node2 fanout1_4 G1_4
node1,node2 fanout1_4 G1_4
Before Backtrace ('G1_3', 'fanout1_4') x 0
None
After Backtrace ('G1_3', 'fanout1_4') 0 0
None
node1,node2 G1_3 fanout1_4
node1,node2 G1_3 fanout1_4
Before Backtrace ('A_3', 'G1_3') x 0
('fanout1_3', 'G1_3') 0 0
None
G.nodes[node1]['gatetype'] G1_3
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_3', 'G1_3')
After Backtrace ('A_3', 'G1_3') 0 0
('fanout1_3', 'G1_3') 0 0
None
node1,node2 A_3 G1_3
Backtrace node A_3 G1_3 0 0
I_Stack.peek() ('A_8', 'G1_8') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_8', 'G1_8', 'sa0']
OUTPUT
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
G1_9 FF1_ip_9 x 0
G1_1 fanout1_2 0 0
fanout1_9 G1_9 x 0
fanout1_9 out1_9 x 0
A_8 G1_8 1 0
G1_3 fanout1_4 0 0
A_9 G1_9 x 0
A_6 G1_6 x 0
A_4 G1_4 x 0
A_3 G1_3 0 0
A_1 G1_1 0 0
FF1_op_0 fanout1_0 0 0
A_0 G1_0 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_5 G1_5 x 0
A_2 G1_2 0 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_5 G1_5 x 0
fanout1_5 out1_5 x 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
G1_8 fanout1_9 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_4 fanout1_5 x 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 0 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_2 fanout1_3 0 0
A_7 G1_7 x 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_9', 'FF1_ip_9'), ('fanout1_8', 'out1_8'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_1', 'out1_1'), ('fanout1_9', 'out1_9'), ('fanout1_6', 'out1_6'), ('fanout1_7', 'out1_7'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_5', 'out1_5')]
faulty_edge_list ['A_8', 'G1_8', 'sa0']
['G1_8', 'fanout1_9', 'G1_9', 'FF1_ip_9']
edges [('G1_8', 'fanout1_9'), ('fanout1_9', 'G1_9'), ('G1_9', 'FF1_ip_9')]
i ('G1_8', 'fanout1_9')
i ('fanout1_9', 'G1_9')
i ('G1_9', 'FF1_ip_9')
G1_8 FF1_ip_9
X_path True
**********************Objective ********************
D_fronteir_list [('G1_8', 0)]
D_fronteir []
D_fronteir ['G1_8']
sort_D_fronteir
[('G1_8', 'fanout1_9')]
D_fronteir_list [('G1_8', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_8
**********************Backtrace ********************
node1,node2 fanout1_8 G1_8
Before Backtrace ('G1_7', 'fanout1_8') x 0
None
After Backtrace ('G1_7', 'fanout1_8') 0 0
None
node1,node2 G1_7 fanout1_8
node1,node2 G1_7 fanout1_8
Before Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') x 0
None
G.nodes[node1]['gatetype'] G1_7
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_7', 'G1_7')
After Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') 0 0
None
node1,node2 fanout1_7 G1_7
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') x 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 fanout1_5 G1_5
node1,node2 fanout1_5 G1_5
Before Backtrace ('G1_4', 'fanout1_5') x 0
None
After Backtrace ('G1_4', 'fanout1_5') 0 0
None
node1,node2 G1_4 fanout1_5
node1,node2 G1_4 fanout1_5
Before Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') x 0
None
G.nodes[node1]['gatetype'] G1_4
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_4', 'G1_4')
After Backtrace ('fanout1_4', 'G1_4') 0 0
('A_4', 'G1_4') 0 0
None
node1,node2 A_4 G1_4
Backtrace node A_4 G1_4 0 0
I_Stack.peek() ('A_8', 'G1_8') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
('A_4', 'G1_4') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_8', 'G1_8', 'sa0']
OUTPUT
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
G1_9 FF1_ip_9 x 0
G1_1 fanout1_2 0 0
fanout1_9 G1_9 x 0
fanout1_9 out1_9 x 0
A_8 G1_8 1 0
G1_3 fanout1_4 0 0
A_9 G1_9 x 0
A_6 G1_6 x 0
A_4 G1_4 0 0
A_3 G1_3 0 0
A_1 G1_1 0 0
FF1_op_0 fanout1_0 0 0
A_0 G1_0 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_5 G1_5 x 0
A_2 G1_2 0 0
fanout1_6 out1_6 x 0
fanout1_6 G1_6 x 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_5 G1_5 0 0
fanout1_5 out1_5 0 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
G1_8 fanout1_9 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 x 0
G1_4 fanout1_5 0 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 0 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_2 fanout1_3 0 0
A_7 G1_7 x 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_9', 'FF1_ip_9'), ('fanout1_8', 'out1_8'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_1', 'out1_1'), ('fanout1_9', 'out1_9'), ('fanout1_6', 'out1_6'), ('fanout1_7', 'out1_7'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_5', 'out1_5')]
faulty_edge_list ['A_8', 'G1_8', 'sa0']
['G1_8', 'fanout1_9', 'G1_9', 'FF1_ip_9']
edges [('G1_8', 'fanout1_9'), ('fanout1_9', 'G1_9'), ('G1_9', 'FF1_ip_9')]
i ('G1_8', 'fanout1_9')
i ('fanout1_9', 'G1_9')
i ('G1_9', 'FF1_ip_9')
G1_8 FF1_ip_9
X_path True
**********************Objective ********************
D_fronteir_list [('G1_8', 0)]
D_fronteir []
D_fronteir ['G1_8']
sort_D_fronteir
[('G1_8', 'fanout1_9')]
D_fronteir_list [('G1_8', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_8
**********************Backtrace ********************
node1,node2 fanout1_8 G1_8
Before Backtrace ('G1_7', 'fanout1_8') x 0
None
After Backtrace ('G1_7', 'fanout1_8') 0 0
None
node1,node2 G1_7 fanout1_8
node1,node2 G1_7 fanout1_8
Before Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') x 0
None
G.nodes[node1]['gatetype'] G1_7
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_7', 'G1_7')
After Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') 0 0
None
node1,node2 fanout1_7 G1_7
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') x 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
node1,node2 fanout1_6 G1_6
node1,node2 fanout1_6 G1_6
Before Backtrace ('G1_5', 'fanout1_6') x 0
None
After Backtrace ('G1_5', 'fanout1_6') 0 0
None
node1,node2 G1_5 fanout1_6
node1,node2 G1_5 fanout1_6
Before Backtrace ('A_5', 'G1_5') x 0
('fanout1_5', 'G1_5') 0 0
None
G.nodes[node1]['gatetype'] G1_5
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_5', 'G1_5')
After Backtrace ('A_5', 'G1_5') 0 0
('fanout1_5', 'G1_5') 0 0
None
node1,node2 A_5 G1_5
Backtrace node A_5 G1_5 0 0
I_Stack.peek() ('A_8', 'G1_8') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
('A_4', 'G1_4') 0
('A_5', 'G1_5') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_8', 'G1_8', 'sa0']
OUTPUT
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
G1_9 FF1_ip_9 x 0
G1_1 fanout1_2 0 0
fanout1_9 G1_9 x 0
fanout1_9 out1_9 x 0
A_8 G1_8 1 0
G1_3 fanout1_4 0 0
A_9 G1_9 x 0
A_6 G1_6 x 0
A_4 G1_4 0 0
A_3 G1_3 0 0
A_1 G1_1 0 0
FF1_op_0 fanout1_0 0 0
A_0 G1_0 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_5 G1_5 0 0
A_2 G1_2 0 0
fanout1_6 out1_6 0 0
fanout1_6 G1_6 0 0
fanout1_7 out1_7 x 0
fanout1_7 G1_7 x 0
fanout1_5 G1_5 0 0
fanout1_5 out1_5 0 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
G1_8 fanout1_9 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 0 0
G1_4 fanout1_5 0 0
G1_6 fanout1_7 x 0
G1_0 fanout1_1 0 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_2 fanout1_3 0 0
A_7 G1_7 x 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_9', 'FF1_ip_9'), ('fanout1_8', 'out1_8'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_1', 'out1_1'), ('fanout1_9', 'out1_9'), ('fanout1_6', 'out1_6'), ('fanout1_7', 'out1_7'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_5', 'out1_5')]
faulty_edge_list ['A_8', 'G1_8', 'sa0']
['G1_8', 'fanout1_9', 'G1_9', 'FF1_ip_9']
edges [('G1_8', 'fanout1_9'), ('fanout1_9', 'G1_9'), ('G1_9', 'FF1_ip_9')]
i ('G1_8', 'fanout1_9')
i ('fanout1_9', 'G1_9')
i ('G1_9', 'FF1_ip_9')
G1_8 FF1_ip_9
X_path True
**********************Objective ********************
D_fronteir_list [('G1_8', 0)]
D_fronteir []
D_fronteir ['G1_8']
sort_D_fronteir
[('G1_8', 'fanout1_9')]
D_fronteir_list [('G1_8', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_8
**********************Backtrace ********************
node1,node2 fanout1_8 G1_8
Before Backtrace ('G1_7', 'fanout1_8') x 0
None
After Backtrace ('G1_7', 'fanout1_8') 0 0
None
node1,node2 G1_7 fanout1_8
node1,node2 G1_7 fanout1_8
Before Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') x 0
None
G.nodes[node1]['gatetype'] G1_7
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('fanout1_7', 'G1_7')
After Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') 0 0
None
node1,node2 fanout1_7 G1_7
node1,node2 fanout1_7 G1_7
Before Backtrace ('G1_6', 'fanout1_7') x 0
None
After Backtrace ('G1_6', 'fanout1_7') 0 0
None
node1,node2 G1_6 fanout1_7
node1,node2 G1_6 fanout1_7
Before Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') x 0
None
G.nodes[node1]['gatetype'] G1_6
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_6', 'G1_6')
After Backtrace ('fanout1_6', 'G1_6') 0 0
('A_6', 'G1_6') 0 0
None
node1,node2 A_6 G1_6
Backtrace node A_6 G1_6 0 0
I_Stack.peek() ('A_8', 'G1_8') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
('A_4', 'G1_4') 0
('A_5', 'G1_5') 0
('A_6', 'G1_6') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_8', 'G1_8', 'sa0']
OUTPUT
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
G1_9 FF1_ip_9 x 0
G1_1 fanout1_2 0 0
fanout1_9 G1_9 x 0
fanout1_9 out1_9 x 0
A_8 G1_8 1 0
G1_3 fanout1_4 0 0
A_9 G1_9 x 0
A_6 G1_6 0 0
A_4 G1_4 0 0
A_3 G1_3 0 0
A_1 G1_1 0 0
FF1_op_0 fanout1_0 0 0
A_0 G1_0 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_5 G1_5 0 0
A_2 G1_2 0 0
fanout1_6 out1_6 0 0
fanout1_6 G1_6 0 0
fanout1_7 out1_7 0 0
fanout1_7 G1_7 0 0
fanout1_5 G1_5 0 0
fanout1_5 out1_5 0 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
G1_8 fanout1_9 x 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 0 0
G1_4 fanout1_5 0 0
G1_6 fanout1_7 0 0
G1_0 fanout1_1 0 0
fanout1_8 G1_8 x 0
fanout1_8 out1_8 x 0
G1_2 fanout1_3 0 0
A_7 G1_7 x 0
G1_7 fanout1_8 x 0
One turn over try another
PO_list [('G1_9', 'FF1_ip_9'), ('fanout1_8', 'out1_8'), ('fanout1_4', 'out1_4'), ('fanout1_3', 'out1_3'), ('fanout1_1', 'out1_1'), ('fanout1_9', 'out1_9'), ('fanout1_6', 'out1_6'), ('fanout1_7', 'out1_7'), ('fanout1_0', 'out1_0'), ('fanout1_2', 'out1_2'), ('fanout1_5', 'out1_5')]
faulty_edge_list ['A_8', 'G1_8', 'sa0']
['G1_8', 'fanout1_9', 'G1_9', 'FF1_ip_9']
edges [('G1_8', 'fanout1_9'), ('fanout1_9', 'G1_9'), ('G1_9', 'FF1_ip_9')]
i ('G1_8', 'fanout1_9')
i ('fanout1_9', 'G1_9')
i ('G1_9', 'FF1_ip_9')
G1_8 FF1_ip_9
X_path True
**********************Objective ********************
D_fronteir_list [('G1_8', 0)]
D_fronteir []
D_fronteir ['G1_8']
sort_D_fronteir
[('G1_8', 'fanout1_9')]
D_fronteir_list [('G1_8', 0)]
@@@@@@@@@@@ undefined_ip
node_D_fronteir G1_8
**********************Backtrace ********************
node1,node2 fanout1_8 G1_8
Before Backtrace ('G1_7', 'fanout1_8') x 0
None
After Backtrace ('G1_7', 'fanout1_8') 0 0
None
node1,node2 G1_7 fanout1_8
node1,node2 G1_7 fanout1_8
Before Backtrace ('A_7', 'G1_7') x 0
('fanout1_7', 'G1_7') 0 0
None
G.nodes[node1]['gatetype'] G1_7
val_assign 0
G.nodes[node1]['gatetype'] xor
edge_to_assign ('A_7', 'G1_7')
After Backtrace ('A_7', 'G1_7') 0 0
('fanout1_7', 'G1_7') 0 0
None
node1,node2 A_7 G1_7
Backtrace node A_7 G1_7 0 0
I_Stack.peek() ('A_8', 'G1_8') 1
('FF1_op_0', 'fanout1_0') 0
('A_0', 'G1_0') 0
('A_1', 'G1_1') 0
('A_2', 'G1_2') 0
('A_3', 'G1_3') 0
('A_4', 'G1_4') 0
('A_5', 'G1_5') 0
('A_6', 'G1_6') 0
('A_7', 'G1_7') 0
None
**********************Forward Implication 1st********************
**************************************************************
faulty_edge_list ['A_8', 'G1_8', 'sa0']
OUTPUT
fanout1_4 G1_4 0 0
fanout1_4 out1_4 0 0
G1_9 FF1_ip_9 x 0
G1_1 fanout1_2 0 0
fanout1_9 G1_9 1 0
fanout1_9 out1_9 1 0
A_8 G1_8 1 0
G1_3 fanout1_4 0 0
A_9 G1_9 x 0
A_6 G1_6 0 0
A_4 G1_4 0 0
A_3 G1_3 0 0
A_1 G1_1 0 0
FF1_op_0 fanout1_0 0 0
A_0 G1_0 0 0
fanout1_3 out1_3 0 0
fanout1_3 G1_3 0 0
A_5 G1_5 0 0
A_2 G1_2 0 0
fanout1_6 out1_6 0 0
fanout1_6 G1_6 0 0
fanout1_7 out1_7 0 0
fanout1_7 G1_7 0 0
fanout1_5 G1_5 0 0
fanout1_5 out1_5 0 0
fanout1_2 out1_2 0 0
fanout1_2 G1_2 0 0
G1_8 fanout1_9 1 0
fanout1_0 G1_0 0 0
fanout1_0 out1_0 0 0
fanout1_1 G1_1 0 0
fanout1_1 out1_1 0 0
G1_5 fanout1_6 0 0
G1_4 fanout1_5 0 0
G1_6 fanout1_7 0 0
G1_0 fanout1_1 0 0
fanout1_8 G1_8 0 0
fanout1_8 out1_8 0 0
G1_2 fanout1_3 0 0
A_7 G1_7 0 0
G1_7 fanout1_8 0 0
One turn over try another
Current Time Frame not suitable to test the fault
