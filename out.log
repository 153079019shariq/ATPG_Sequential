########################################################################################
########################################################################################
OUTPUT NODE
('G2', 'out1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('G1', 'FF1_ip', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout1', 'FF2_ip', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
INPUT NODE
('A', 'fanout1', {'fault': 'sa1', 'value_faulty': '1', 'value_non_fault': 'x'})
('FF1_op', 'fanout2', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('FF2_op', 'G2', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
GATE
('G2', 'out1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('G1', 'FF1_ip', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
FANOUT
('A', 'fanout1', {'fault': 'sa1', 'value_faulty': '1', 'value_non_fault': 'x'})
('FF1_op', 'fanout2', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout1', 'FF2_ip', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout1', 'G1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout2', 'G2', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout2', 'G1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
No_of_Unroll 1
faulty_node1_list ['A']
faulty_node2_list ['fanout1']
stuck_at_list ['sa1']
fault_path_to_op False
faulty_node1_list ['A']
faulty_node2_list ['fanout1']
bfs {'A': 1, 'out1': 3, 'FF1_op': 1, 'G2': 3, 'FF2_op': 1, 'fanout1': 2, 'fanout2': 2, 'FF2_ip': 2, 'FF1_ip': 3, 'G1': 3}
########################################################################################
########################################################################################
##########################################################
OUTPUT NODE
('G1_1', 'FF1_ip_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('G2_0', 'out1_0', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('G2_1', 'out1_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout1_1', 'FF2_ip_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
INPUT NODE
('A_0', 'fanout1_0', {'fault': 'sa1', 'value_faulty': '1', 'value_non_fault': 'x'})
('FF1_op_0', 'fanout2_0', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('A_1', 'fanout1_1', {'fault': 'sa1', 'value_faulty': '1', 'value_non_fault': 'x'})
('FF2_op_0', 'G2_0', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
GATE
('G1_1', 'FF1_ip_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('G2_0', 'out1_0', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('G2_1', 'out1_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('G1_0', 'fanout2_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
FANOUT
('A_0', 'fanout1_0', {'fault': 'sa1', 'value_faulty': '1', 'value_non_fault': 'x'})
('FF1_op_0', 'fanout2_0', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('G1_0', 'fanout2_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('A_1', 'fanout1_1', {'fault': 'sa1', 'value_faulty': '1', 'value_non_fault': 'x'})
('fanout1_0', 'G2_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout1_0', 'G1_0', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout2_1', 'G2_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout2_1', 'G1_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout2_0', 'G2_0', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout2_0', 'G1_0', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout1_1', 'FF2_ip_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
('fanout1_1', 'G1_1', {'value_non_fault': 'x', 'value_faulty': 'x', 'fault': ''})
No_of_Unroll 2
faulty_node1_list ['A_0', 'A_1']
faulty_node2_list ['fanout1_0', 'fanout1_1']
stuck_at_list ['sa1', 'sa1']
fault_path_to_op True
faulty_node1_list ['A_0', 'A_1']
faulty_node2_list ['fanout1_0', 'fanout1_1']
bfs {'FF2_ip_1': 2, 'FF1_ip_1': 5, 'FF2_op_0': 1, 'fanout1_0': 2, 'A_0': 1, 'FF1_op_0': 1, 'G2_0': 3, 'fanout1_1': 2, 'G1_1': 5, 'G1_0': 3, 'A_1': 1, 'fanout2_1': 4, 'fanout2_0': 2, 'G2_1': 5, 'out1_0': 3, 'out1_1': 5}
faulty_list ['A_0', 'fanout1_0', 'sa1']
faulty_edge_select 0
faulty_edge_list ['A_0', 'fanout1_0', 'sa1']
OUTPUT
G1_1 FF1_ip_1 x x
fanout1_0 G2_1 x x
fanout1_0 G1_0 x x
A_0 fanout1_0 x 1
FF1_op_0 fanout2_0 x x
G2_0 out1_0 x x
G2_1 out1_1 x x
G1_0 fanout2_1 x x
A_1 fanout1_1 x 1
fanout2_1 G2_1 x x
fanout2_1 G1_1 x x
fanout2_0 G2_0 x x
fanout2_0 G1_0 x x
fanout1_1 FF2_ip_1 x x
fanout1_1 G1_1 x x
FF2_op_0 G2_0 x x
test_not_possible_with_this_val() False
**********************Objective ********************
D_fronteir_list []
node1 node2 A_0 fanout1_0
**********************Backtrace ********************
Backtrace node A_0 fanout1_0 0 0
I_Stack.peek() ('A_0', 'fanout1_0') 0
None
**********************Forward Implication 1st********************
node1 node2 A_0 fanout1_0 0 1
node1 node2 fanout1_0 G2_1 0 1
faulty_edge_list[:2] ['A_0', 'fanout1_0']
list(list(G.out_edges(nbunch=node2, data=False))[0] ['G2_1', 'out1_1']
node1 node2 fanout1_0 G1_0 0 1
faulty_edge_list[:2] ['A_0', 'fanout1_0']
list(list(G.out_edges(nbunch=node2, data=False))[0] ['G1_0', 'fanout2_1']
node1 node2 G1_0 fanout2_1 0 x
node1 node2 fanout2_1 G2_1 0 x
faulty_edge_list[:2] ['A_0', 'fanout1_0']
list(list(G.out_edges(nbunch=node2, data=False))[0] ['G2_1', 'out1_1']
node1 node2 fanout2_1 G1_1 0 x
faulty_edge_list[:2] ['A_0', 'fanout1_0']
list(list(G.out_edges(nbunch=node2, data=False))[0] ['G1_1', 'FF1_ip_1']
**************************************************************
faulty_edge_list ['A_0', 'fanout1_0', 'sa1']
OUTPUT
G1_1 FF1_ip_1 0 x
fanout1_0 G2_1 0 1
fanout1_0 G1_0 0 1
A_0 fanout1_0 0 1
FF1_op_0 fanout2_0 x x
G2_0 out1_0 x x
G2_1 out1_1 0 1
G1_0 fanout2_1 0 x
A_1 fanout1_1 x 1
fanout2_1 G2_1 0 x
fanout2_1 G1_1 0 x
fanout2_0 G2_0 x x
fanout2_0 G1_0 x x
fanout1_1 FF2_ip_1 x x
fanout1_1 G1_1 x x
FF2_op_0 G2_0 x x
One turn over try another
Fault propagated
error_at_FF_op_or_Primary_input(GU,PI_list) False
